{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment CSS Parser  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
0.0 \par
}}CSS Parser}
{\comment Generated by doxygen1.9.1.}
{\creatim \yr2021\mo7\dy25\hr16\min1\sec54}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt CSS Parser}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 0.0\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Sun Jul 25 2021 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b CSSParser} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CSSProperties} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CSSUtils} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b cssparser/{\b CSSParser.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b cssparser/{\b CSSParser.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b cssparser/{\b CSSProperties.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b cssparser/{\b CSSProperties.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b cssparser/{\b CSSUtils.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b cssparser/{\b CSSUtils.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b cssparser/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CSSParser Class Reference\par \pard\plain 
{\tc\tcl2 \v CSSParser}
{\xe \v CSSParser}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
\par
{
{\f2 #include <CSSParser.h>}}\par
Collaboration diagram for CSSParser:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b message}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b token}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b message_type} \{ {\b Information}
, {\b Warning}
, {\b Error}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b parse_status} \{ {\b PIS}
, {\b PIP}
, {\b PIV}
, {\b PINSTR}
, {\b PIC}
, {\b PAT}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b token_type} \{ {\b CHARSET}
, {\b IMPORT}
, {\b NAMESP}
, {\b AT_START}
, {\b AT_END}
, {\b SEL_START}
, {\b SEL_END}
, {\b PROPERTY}
, {\b VALUE}
, {\b COMMENT}
, {\b CSS_END}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b CSSParser} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_charset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b get_import} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_namespace} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b token} {\b get_next_token} (int start_ptr=-1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b get_parse_errors} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b get_parse_info} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b get_parse_warnings} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_type_name} ({\b token_type} t)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b parse_css} (std::string css_input)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b reset_parser} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b serialize_css} (std::string filename="", bool tostdout=true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b set_csstokens} (const std::vector< {\b token} > &ntokens)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b set_level} (std::string level="CSS3.0")\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _seeknocomment} (const int key, const int move)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b add_token} (const {\b token_type} ttype, const std::string data, const bool force=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b explode_selectors} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b get_logs} ({\b message_type} t)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_token} (std::string &istring, const int i)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b log} (const std::string msg, const {\b message_type} type, int iline=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b parseInAtBlock} (std::string &css_input, int &i, {\b parse_status} &astatus, {\b parse_status} &afrom)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b parseInComment} (std::string &css_input, int &i, {\b parse_status} &astatus, {\b parse_status} &afrom, std::string &cur_comment)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b parseInProperty} (std::string &css_input, int &i, {\b parse_status} &astatus, {\b parse_status} &afrom, bool &invalid_at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b parseInSelector} (std::string &css_input, int &i, {\b parse_status} &astatus, {\b parse_status} &afrom, bool &invalid_at, char &str_char, int str_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b parseInString} (std::string &css_input, int &i, {\b parse_status} &astatus, {\b parse_status} &afrom, char &str_char, bool &str_in_str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b parseInValue} (std::string &css_input, int &i, {\b parse_status} &astatus, {\b parse_status} &afrom, bool &invalid_at, char &str_char, bool &pn, int str_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b record_position} ({\b parse_status} old_status, {\b parse_status} new_status, std::string &css_input, int i, bool force=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b unicode} (std::string &istring, int &i)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b property_is_next} (std::string istring, int pos)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::map< std::string, {\b parse_status} > {\b at_rules}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b charset}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b css_level}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b csstemplate}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b token} > {\b csstokens}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b cur_at}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b cur_function}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b cur_function_arr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b cur_property}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b cur_selector}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b cur_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b cur_sub_value}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b cur_sub_value_arr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b cur_value}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b import}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::map< int, std::vector< {\b message} > > {\b logs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b namesp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< int > {\b sel_separate}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b selector_nest_level}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sline}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b spos}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b token_ptr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b token_type_names}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b tokens}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Class Documentation\par
\pard\plain 
{\xe \v CSSParser::message}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
struct CSSParser::message\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
Collaboration diagram for CSSParser::message:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCSSParser_1_1message__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Class Members:\par}
\pard\plain \s80\li0\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\qr string{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\cell }{m\cell }{\cell }{\row }
{\qr {\b message_type}{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\cell }{t\cell }{\cell }{\row }
}
{\xe \v CSSParser::token}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
struct CSSParser::token\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
Collaboration diagram for CSSParser::token:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCSSParser_1_1token__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Class Members:\par}
\pard\plain \s80\li0\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\qr string{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
\cell }{data\cell }{\cell }{\row }
{\qr int{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
\cell }{line\cell }{\cell }{\row }
{\qr int{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
\cell }{pos\cell }{\cell }{\row }
{\qr {\b token_type}{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
\cell }{type\cell }{\cell }{\row }
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Enumeration Documentation\par
\pard\plain 
{\xe \v message_type\:CSSParser}
{\xe \v CSSParser\:message_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b CSSParser::message_type}}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v Information\:CSSParser}
{\xe \v CSSParser\:Information}
{\qr Information{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
\cell }{\cell }{\row }
{\xe \v Warning\:CSSParser}
{\xe \v CSSParser\:Warning}
{\qr Warning{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
\cell }{\cell }{\row }
{\xe \v Error\:CSSParser}
{\xe \v CSSParser\:Error}
{\qr Error{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 64     \{\par
65         Information,Warning,Error\par
66     \};\par
}
}
{\xe \v parse_status\:CSSParser}
{\xe \v CSSParser\:parse_status}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b CSSParser::parse_status}}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v PIS\:CSSParser}
{\xe \v CSSParser\:PIS}
{\qr PIS{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\cell }{\cell }{\row }
{\xe \v PIP\:CSSParser}
{\xe \v CSSParser\:PIP}
{\qr PIP{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
\cell }{\cell }{\row }
{\xe \v PIV\:CSSParser}
{\xe \v CSSParser\:PIV}
{\qr PIV{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
\cell }{\cell }{\row }
{\xe \v PINSTR\:CSSParser}
{\xe \v CSSParser\:PINSTR}
{\qr PINSTR{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
\cell }{\cell }{\row }
{\xe \v PIC\:CSSParser}
{\xe \v CSSParser\:PIC}
{\qr PIC{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
\cell }{\cell }{\row }
{\xe \v PAT\:CSSParser}
{\xe \v CSSParser\:PAT}
{\qr PAT{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 59     \{\par
60         PIS, PIP, PIV, PINSTR, PIC, PAT\par
61     \};\par
}
}
{\xe \v token_type\:CSSParser}
{\xe \v CSSParser\:token_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b CSSParser::token_type}}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v CHARSET\:CSSParser}
{\xe \v CSSParser\:CHARSET}
{\qr CHARSET{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
\cell }{\cell }{\row }
{\xe \v IMPORT\:CSSParser}
{\xe \v CSSParser\:IMPORT}
{\qr IMPORT{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
\cell }{\cell }{\row }
{\xe \v NAMESP\:CSSParser}
{\xe \v CSSParser\:NAMESP}
{\qr NAMESP{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
\cell }{\cell }{\row }
{\xe \v AT_START\:CSSParser}
{\xe \v CSSParser\:AT_START}
{\qr AT_START{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
\cell }{\cell }{\row }
{\xe \v AT_END\:CSSParser}
{\xe \v CSSParser\:AT_END}
{\qr AT_END{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
\cell }{\cell }{\row }
{\xe \v SEL_START\:CSSParser}
{\xe \v CSSParser\:SEL_START}
{\qr SEL_START{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
\cell }{\cell }{\row }
{\xe \v SEL_END\:CSSParser}
{\xe \v CSSParser\:SEL_END}
{\qr SEL_END{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
\cell }{\cell }{\row }
{\xe \v PROPERTY\:CSSParser}
{\xe \v CSSParser\:PROPERTY}
{\qr PROPERTY{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
\cell }{\cell }{\row }
{\xe \v VALUE\:CSSParser}
{\xe \v CSSParser\:VALUE}
{\qr VALUE{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
\cell }{\cell }{\row }
{\xe \v COMMENT\:CSSParser}
{\xe \v CSSParser\:COMMENT}
{\qr COMMENT{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
\cell }{\cell }{\row }
{\xe \v CSS_END\:CSSParser}
{\xe \v CSSParser\:CSS_END}
{\qr CSS_END{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 69     \{\par
70         CHARSET, IMPORT, NAMESP, AT_START, AT_END, SEL_START, SEL_END, PROPERTY, VALUE, COMMENT, CSS_END\par
71     \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v CSSParser\:CSSParser}
{\xe \v CSSParser\:CSSParser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
CSSParser::CSSParser ()}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 54 \{ \par
55     tokens = {\cf22 "\{\};:()@='\\"/,\\\\!$%&*+.<>?[]^`|~"};\par
56 \par
57     {\cf20 // Used for serializing parsed css}\par
58     csstemplate.push_back({\cf22 "    "});    {\cf20 //  0 - standard indentation}\par
59     csstemplate.push_back({\cf22 " \{\\n"});    {\cf20 //  1 - bracket after @-rule}\par
60     csstemplate.push_back({\cf22 ""});        {\cf20 //  2 - unused}\par
61     csstemplate.push_back({\cf22 " \{\\n"});    {\cf20 //  3 - bracket after selector was "\\n\{\\n"}\par
62     csstemplate.push_back({\cf22 ""});        {\cf20 //  4 - unused}\par
63     csstemplate.push_back({\cf22 ""});        {\cf20 //  5 - string after property before value}\par
64     csstemplate.push_back({\cf22 ";\\n"});     {\cf20 //  6 - string after value}\par
65     csstemplate.push_back({\cf22 "\}"});       {\cf20 //  7 - closing bracket - selector}\par
66     csstemplate.push_back({\cf22 "\\n\\n"});    {\cf20 //  8 - space between blocks \{...\}}\par
67     csstemplate.push_back({\cf22 "\}\\n\\n"});   {\cf20 //  9 - closing bracket @-rule}\par
68     csstemplate.push_back({\cf22 ""});        {\cf20 // 10 - unused}\par
69     csstemplate.push_back({\cf22 ""});        {\cf20 // 11 - before comment}\par
70     csstemplate.push_back({\cf22 "\\n"});      {\cf20 // 12 - after comment}\par
71     csstemplate.push_back({\cf22 "\\n"});      {\cf20 // 13 - after last line @-rule}\par
72 \par
73     {\cf20 // at_rule to parser state map}\par
74     at_rules[{\cf22 "page"}] = PIS;\par
75     at_rules[{\cf22 "font-face"}] = PIS;\par
76     at_rules[{\cf22 "charset"}] = PIV;\par
77     at_rules[{\cf22 "import"}] = PIV;\par
78     at_rules[{\cf22 "namespace"}] = PIV;\par
79     at_rules[{\cf22 "media"}] = PAT;\par
80     at_rules[{\cf22 "keyframes"}] = PAT;\par
81     at_rules[{\cf22 "supports"}] = PAT;\par
82     at_rules[{\cf22 "-moz-keyframes"}] = PAT;\par
83     at_rules[{\cf22 "-ms-keyframes"}] = PAT;\par
84     at_rules[{\cf22 "-o-keyframes"}] = PAT;\par
85     at_rules[{\cf22 "-webkit-keyframes"}] = PAT;\par
86 \par
87     {\cf20 // descriptive names for each token type}\par
88     token_type_names.push_back({\cf22 "CHARSET"});\par
89     token_type_names.push_back({\cf22 "IMPORT"});\par
90     token_type_names.push_back({\cf22 "NAMESP"});\par
91     token_type_names.push_back({\cf22 "AT_START"});\par
92     token_type_names.push_back({\cf22 "AT_END"});\par
93     token_type_names.push_back({\cf22 "SEL_START"});\par
94     token_type_names.push_back({\cf22 "SEL_END"});\par
95     token_type_names.push_back({\cf22 "PROPERTY"});\par
96     token_type_names.push_back({\cf22 "VALUE"});\par
97     token_type_names.push_back({\cf22 "COMMENT"});\par
98     token_type_names.push_back({\cf22 "CSS_END"});\par
99 \par
100     css_level = {\cf22 "CSS3.0"};\par
101 \} \par
}
{
\ql
References at_rules, css_level, csstemplate, PAT, PIS, PIV, token_type_names, and tokens.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v _seeknocomment\:CSSParser}
{\xe \v CSSParser\:_seeknocomment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CSSParser::_seeknocomment (const int  {\i key}, const int  {\i move}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 268 \{\par
269     {\cf18 int} go = (move > 0) ? 1 : -1;\par
270     {\cf19 for} ({\cf18 int} i = key + 1; abs(key-i)-1 < abs(move); i += go)\par
271     \{\par
272         {\cf19 if} (i < 0 || i >= csstokens.size()) \{\par
273             {\cf19 return} -1;\par
274         \}\par
275         {\cf19 if} (csstokens[i].type == COMMENT) \{\par
276             move += 1;\par
277             {\cf19 continue};\par
278         \}\par
279         {\cf19 return} csstokens[i].type;\par
280     \}\par
281     {\cf20 // FIXME: control can reach end of non-void function}\par
282     {\cf19 return} -1;\par
283 \}\par
}
{
\ql
References COMMENT, and csstokens.}\par
{
\ql
Referenced by serialize_css().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a9d1cb826d59f87901fdd138b8375d4e5_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v add_token\:CSSParser}
{\xe \v CSSParser\:add_token}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::add_token (const {\b token_type}  {\i ttype}, const std::string  {\i data}, const bool  {\i force} = {\f2 false}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 178 \{\par
179     token temp;\par
180     temp.type = ttype;\par
181     temp.pos = spos;\par
182     temp.line = sline;\par
183     temp.data = (ttype == COMMENT) ? data : CSSUtils::trim(data);\par
184     csstokens.push_back(temp);\par
185     {\cf19 if} (ttype == SEL_START) selector_nest_level++;\par
186     {\cf19 if} (ttype == SEL_END) selector_nest_level--;\par
187 \}\par
}
{
\ql
References COMMENT, csstokens, CSSParser::token::data, CSSParser::token::line, CSSParser::token::pos, SEL_END, SEL_START, selector_nest_level, sline, spos, CSSUtils::trim(), and CSSParser::token::type.}\par
{
\ql
Referenced by parseInAtBlock(), parseInComment(), parseInProperty(), parseInSelector(), and parseInValue().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_ab89438a335ba393c40ba437294e2fe70_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_ab89438a335ba393c40ba437294e2fe70_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v explode_selectors\:CSSParser}
{\xe \v CSSParser\:explode_selectors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::explode_selectors (){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 262 \{\par
263     sel_separate = std::vector<int>();\par
264 \}\par
}
{
\ql
References sel_separate.}\par
{
\ql
Referenced by parseInProperty(), and parseInValue().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a1f21ad955ae8f583ce70ac83b32a12ae_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_charset\:CSSParser}
{\xe \v CSSParser\:get_charset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::get_charset ()}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 136 \{\par
137     {\cf19 return} charset;\par
138 \}\par
}
{
\ql
References charset.}\par
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a16b69275eb31cfb6792e52239babef27_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_import\:CSSParser}
{\xe \v CSSParser\:get_import}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > CSSParser::get_import ()}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 146 \{\par
147     {\cf19 return} {\cf17 import};\par
148 \}\par
}
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a832bab641f5b6551f6727d8546aa600a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_logs\:CSSParser}
{\xe \v CSSParser\:get_logs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > CSSParser::get_logs ({\b CSSParser::message_type}  {\i mt}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 986 \{\par
987     std::vector<std::string> res;\par
988     {\cf19 if}(logs.size() > 0)\par
989     \{\par
990         {\cf19 for}(std::map<{\cf18 int}, std::vector<message> >::iterator j = logs.begin(); j != logs.end(); j++ )\par
991         \{\par
992             {\cf19 for}({\cf18 int} i = 0; i < j->second.size(); ++i)\par
993             \{\par
994                 {\cf19 if} (j->second[i].t == mt) \{\par
995                     res.push_back(std::to_string(j->first) + {\cf22 ": "} + j->second[i].m);\par
996                 \}\par
997             \}\par
998         \}\par
999     \}\par
1000     {\cf19 return} res;\par
1001 \}\par
}
{
\ql
References logs.}\par
{
\ql
Referenced by get_parse_errors(), get_parse_info(), and get_parse_warnings().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a31d8fed09686ee717f4e6eb054110849_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_namespace\:CSSParser}
{\xe \v CSSParser\:get_namespace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::get_namespace ()}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 141 \{\par
142     {\cf19 return} namesp;\par
143 \}\par
}
{
\ql
References namesp.}\par
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a0e2f279a94fc27a5e3635a30de596632_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_next_token\:CSSParser}
{\xe \v CSSParser\:get_next_token}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b CSSParser::token} CSSParser::get_next_token (int  {\i start_ptr} = {\f2 -1})}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 152 \{\par
153     {\cf19 if} ((start_ptr >= 0) && (start_ptr < csstokens.size()))\par
154     \{\par
155         token_ptr = start_ptr;\par
156     \}\par
157 \par
158     token atoken;\par
159     atoken.type = CSS_END;\par
160     atoken.data = {\cf22 ""};\par
161 \par
162     {\cf19 if} (token_ptr < csstokens.size())\par
163     \{\par
164         atoken = csstokens[token_ptr];\par
165         token_ptr++;\par
166     \}\par
167     {\cf19 return} atoken;\par
168 \}\par
}
{
\ql
References CSS_END, csstokens, CSSParser::token::data, token_ptr, and CSSParser::token::type.}\par
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a0c16e8bf920190f71c89108a8fbbeea0_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_parse_errors\:CSSParser}
{\xe \v CSSParser\:get_parse_errors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > CSSParser::get_parse_errors ()}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 968 \{ \par
969     {\cf19 return} get_logs(CSSParser::Error);\par
970 \}\par
}
{
\ql
References Error, and get_logs().}\par
{
\ql
Referenced by main().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_ad91af1ca54c79dd13f07ecb14fdb7e8d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_ad91af1ca54c79dd13f07ecb14fdb7e8d_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_parse_info\:CSSParser}
{\xe \v CSSParser\:get_parse_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > CSSParser::get_parse_info ()}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 980 \{\par
981     {\cf19 return} get_logs(CSSParser::Information);\par
982 \}\par
}
{
\ql
References get_logs(), and Information.}\par
{
\ql
Referenced by main().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a8435cd5b6446fc5e55e00d58ce7f8126_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a8435cd5b6446fc5e55e00d58ce7f8126_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_parse_warnings\:CSSParser}
{\xe \v CSSParser\:get_parse_warnings}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > CSSParser::get_parse_warnings ()}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 974 \{\par
975     {\cf19 return} get_logs(CSSParser::Warning);\par
976 \}\par
}
{
\ql
References get_logs(), and Warning.}\par
{
\ql
Referenced by main().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_aa1927cc5ca43b7b0464d1da6f07d1421_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_aa1927cc5ca43b7b0464d1da6f07d1421_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v get_type_name\:CSSParser}
{\xe \v CSSParser\:get_type_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::get_type_name ({\b CSSParser::token_type}  {\i t})}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 172 \{\par
173     {\cf19 return} token_type_names[t];\par
174 \}\par
}
{
\ql
References token_type_names.}\par
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a20e0ef77c8b14c050af2cb13468d9122_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v is_token\:CSSParser}
{\xe \v CSSParser\:is_token}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSParser::is_token (std::string &  {\i istring}, const int  {\i i}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 256 \{\par
257     {\cf19 return} (CSSUtils::in_str_array(tokens, istring[i]) && !CSSUtils::escaped(istring,i));\par
258 \}\par
}
{
\ql
References CSSUtils::escaped(), CSSUtils::in_str_array(), and tokens.}\par
{
\ql
Referenced by parseInAtBlock(), parseInProperty(), parseInSelector(), and parseInValue().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a4c35325486936778866837d890bd1889_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a4c35325486936778866837d890bd1889_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v log\:CSSParser}
{\xe \v CSSParser\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::log (const std::string  {\i msg}, const {\b message_type}  {\i type}, int  {\i iline} = {\f2 0}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 191 \{\par
192     message new_msg;\par
193     new_msg.m = msg;\par
194     new_msg.t = type;\par
195     {\cf19 if}(iline == 0)\par
196     \{\par
197         iline = line;\par
198     \}\par
199     {\cf19 if}(logs.count(line) > 0)\par
200     \{\par
201         {\cf19 for}({\cf18 int} i = 0; i < logs[line].size(); ++i)\par
202         \{\par
203             {\cf19 if}(logs[line][i].m == new_msg.m && logs[line][i].t == new_msg.t)\par
204             \{\par
205                 {\cf19 return};\par
206             \}\par
207         \}\par
208     \}\par
209     logs[line].push_back(new_msg);\par
210 \}\par
}
{
\ql
References line, logs, CSSParser::message::m, and CSSParser::message::t.}\par
{
\ql
Referenced by parse_css(), parseInAtBlock(), parseInProperty(), parseInSelector(), parseInString(), parseInValue(), and unicode().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a8d9d19c6725d7b1f2af84e383d6758fc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v parse_css\:CSSParser}
{\xe \v CSSParser\:parse_css}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::parse_css (std::string  {\i css_input})}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 872 \{\par
873     reset_parser();\par
874     css_input = CSSUtils::str_replace({\cf22 "\\r\\n"},{\cf22 "\\n"},css_input); {\cf20 // Replace newlines}\par
875     css_input += {\cf22 "\\n"};\par
876 {\cf20 //     std::cout << "Css Input: " << css_input << std::endl;}\par
877     parse_status astatus = PIS, afrom;\par
878     parse_status old_status = PIS;\par
879     record_position(PIS, PIS, css_input, 0, {\cf17 true});\par
880     std::string cur_comment;\par
881 \par
882     cur_sub_value_arr.clear();\par
883     cur_function_arr.clear(); {\cf20 // Stack of nested function calls}\par
884     {\cf18 char} str_char;\par
885     {\cf18 bool} str_in_str = {\cf17 false};\par
886     {\cf18 bool} invalid_at = {\cf17 false};\par
887     {\cf18 bool} pn = {\cf17 false};\par
888 \par
889     {\cf18 int} str_size = css_input.length();\par
890     {\cf19 for}({\cf18 int} i = 0; i < str_size; ++i)\par
891     \{\par
892         {\cf19 if}(css_input[i] == {\cf23 '\\n'} || css_input[i] == {\cf23 '\\r'})\par
893         \{\par
894             ++line;\par
895         \}\par
896 \par
897 \par
898         {\cf20 // record current position for selected state transitions}\par
899         std::cout << {\cf22 "Current Posistion: "}<< i << std::endl;\par
900         {\cf19 if} (old_status != astatus)\par
901         \{\par
902             record_position(old_status, astatus, css_input, i);\par
903         \}\par
904         old_status = astatus;\par
905 \par
906         {\cf19 switch}(astatus)\par
907         \{\par
908             {\cf20 /* Case in-at-block */}\par
909             {\cf19 case} PAT:\par
910                 parseInAtBlock(css_input, i, astatus, afrom);\par
911                 {\cf19 break};\par
912 \par
913             {\cf20 /* Case in-selector */}\par
914             {\cf19 case} PIS:\par
915                 parseInSelector(css_input, i, astatus, afrom, invalid_at, str_char, str_size);\par
916                 {\cf19 break};\par
917 \par
918             {\cf20 /* Case in-property */}\par
919             {\cf19 case} PIP:\par
920                 parseInProperty(css_input, i, astatus, afrom, invalid_at);\par
921                 {\cf19 break};\par
922 \par
923             {\cf20 /* Case in-value */}\par
924             {\cf19 case} PIV:\par
925                 parseInValue(css_input, i, astatus, afrom, invalid_at, str_char, pn, str_size);\par
926                 {\cf19 break};\par
927 \par
928             {\cf20 /* Case in-string */}\par
929             {\cf19 case} PINSTR:\par
930                 parseInString(css_input, i, astatus, afrom, str_char, str_in_str);\par
931                 {\cf19 break};\par
932 \par
933             {\cf20 /* Case in-comment */}\par
934             {\cf19 case} PIC:\par
935                 parseInComment(css_input, i, astatus, afrom, cur_comment);\par
936                 {\cf19 break};\par
937         \}\par
938 \par
939 \par
940 \par
941         std::cout << {\cf22 "Pre Status: "} <<  ParseStatus[old_status] << {\cf22 " Current Status: "} << ParseStatus[astatus]  << std::endl;\par
942 \par
943     \}\par
944     {\cf20 // validate that every selector start had its own selector end}\par
945     {\cf19 if} (selector_nest_level != 0)\par
946     \{\par
947         log({\cf22 "Unbalanced selector braces in style sheet"}, Error, line);\par
948     \}\par
949     \par
950 \par
951 \}\par
}
{
\ql
References cur_function_arr, cur_sub_value_arr, Error, line, log(), parseInAtBlock(), parseInComment(), parseInProperty(), parseInSelector(), parseInString(), parseInValue(), ParseStatus, PAT, PIC, PINSTR, PIP, PIS, PIV, record_position(), reset_parser(), selector_nest_level, and CSSUtils::str_replace().}\par
{
\ql
Referenced by main().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a5c8c8beaaeb41710ba7816d81ad75f4d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a5c8c8beaaeb41710ba7816d81ad75f4d_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v parseInAtBlock\:CSSParser}
{\xe \v CSSParser\:parseInAtBlock}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::parseInAtBlock (std::string &  {\i css_input}, int &  {\i i}, {\b parse_status} &  {\i astatus}, {\b parse_status} &  {\i afrom}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 384 \{\par
385     {\cf19 if}(is_token(css_input,i))\par
386     \{\par
387         {\cf19 if}(css_input[i] == {\cf23 '/'} && CSSUtils::s_at(css_input,i+1) == {\cf23 '*'})\par
388         \{\par
389             astatus = PIC; i += 2;\par
390             afrom = PAT;\par
391         \}\par
392         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '\{'})\par
393         \{\par
394             astatus = PIS;\par
395             add_token(AT_START, cur_at);\par
396         \}\par
397         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 ','})\par
398         \{\par
399             cur_at = CSSUtils::trim(cur_at) + {\cf22 ","};\par
400         \}\par
401         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '\\\\'})\par
402         \{\par
403             cur_at += unicode(css_input,i);\par
404         \}\par
405         {\cf19 else} {\cf20 /*if((css_input[i] == '(') || (css_input[i] == ':') || (css_input[i] == ')') || (css_input[i] == '.'))*/}\par
406         \{\par
407             {\cf19 if}(!CSSUtils::in_char_arr({\cf22 "():/."}, css_input[i]))\par
408             \{\par
409                 {\cf20 // Strictly speaking, these are only permitted in @media rules }\par
410                 log({\cf22 "Unexpected symbol '"} + std::string(css_input, i, 1) + {\cf22 "' in @-rule"}, Warning);\par
411             \}\par
412             cur_at += css_input[i];  {\cf20 /* append tokens after media selector */}\par
413         \}\par
414     \}\par
415     {\cf19 else}\par
416     \{\par
417         {\cf20 // Skip excess whitespace}\par
418         {\cf18 int} lastpos = cur_at.length()-1;\par
419         {\cf19 if}(lastpos == -1 || !( (CSSUtils::ctype_space(cur_at[lastpos]) ||\par
420                                (is_token(cur_at,lastpos) && cur_at[lastpos] == {\cf23 ','})) && \par
421                                CSSUtils::ctype_space(css_input[i])))\par
422         \{\par
423             cur_at += css_input[i];\par
424         \}\par
425     \}\par
426 \}\par
}
{
\ql
References add_token(), AT_START, CSSUtils::ctype_space(), cur_at, CSSUtils::in_char_arr(), is_token(), log(), PAT, PIC, PIS, CSSUtils::s_at(), CSSUtils::trim(), unicode(), and Warning.}\par
{
\ql
Referenced by parse_css().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a2e5de68469c6fd722d79366be8743123_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a2e5de68469c6fd722d79366be8743123_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v parseInComment\:CSSParser}
{\xe \v CSSParser\:parseInComment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::parseInComment (std::string &  {\i css_input}, int &  {\i i}, {\b parse_status} &  {\i astatus}, {\b parse_status} &  {\i afrom}, std::string &  {\i cur_comment}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 796 \{\par
797 \par
798     {\cf19 if}(css_input[i] == {\cf23 '*'} && CSSUtils::s_at(css_input,i+1) == {\cf23 '/'})\par
799     \{\par
800         astatus = afrom;\par
801         ++i;\par
802         add_token(COMMENT, cur_comment);\par
803         cur_comment = {\cf22 ""};\par
804     \}\par
805     {\cf19 else}\par
806     \{\par
807         cur_comment += css_input[i];\par
808     \}\par
809 \}\par
}
{
\ql
References add_token(), COMMENT, and CSSUtils::s_at().}\par
{
\ql
Referenced by parse_css().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_aedbe86f8b56e4c2d1cb9fd918e389de0_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_aedbe86f8b56e4c2d1cb9fd918e389de0_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v parseInProperty\:CSSParser}
{\xe \v CSSParser\:parseInProperty}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::parseInProperty (std::string &  {\i css_input}, int &  {\i i}, {\b parse_status} &  {\i astatus}, {\b parse_status} &  {\i afrom}, bool &  {\i invalid_at}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 526 \{\par
527     std::cout << {\cf22 "PIP Posistion: "} << i << std::endl;\par
528 \par
529     {\cf19 if} (is_token(css_input,i))\par
530     \{\par
531         std::cout << {\cf22 "PIP "} << css_input[i] << {\cf22 " Is Token"}<< std::endl;\par
532         {\cf19 if} (css_input[i] == {\cf23 ':'} || (css_input[i] == {\cf23 '='} && cur_property != {\cf22 ""}))\par
533         \{\par
534             astatus = PIV;\par
535             {\cf18 bool} valid = {\cf17 true} || (CSSProperties::instance()->contains(cur_property) && \par
536                                   CSSProperties::instance()->levels(cur_property).find(css_level,0) != std::string::npos);\par
537             {\cf19 if}(valid) \{\par
538                 add_token(PROPERTY, cur_property);\par
539             \}\par
540         \}\par
541         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '/'} && CSSUtils::s_at(css_input,i+1) == {\cf23 '*'} && cur_property == {\cf22 ""})\par
542         \{\par
543             astatus = PIC; ++i;\par
544             afrom = PIP;\par
545         \}\par
546         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '\}'})\par
547         \{\par
548             explode_selectors();\par
549             astatus = PIS;\par
550             invalid_at = {\cf17 false};\par
551             add_token(SEL_END, cur_selector);\par
552             cur_selector = {\cf22 ""};\par
553             cur_property = {\cf22 ""};\par
554         \}\par
555         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 ';'})\par
556         \{\par
557             cur_property = {\cf22 ""};\par
558         \}\par
559         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '\\\\'})\par
560         \{\par
561             cur_property += unicode(css_input,i);\par
562         \}\par
563         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '*'}) \par
564         \{\par
565             {\cf20 // IE7 and below recognize properties that begin with '*'}\par
566             {\cf19 if} (cur_property == {\cf22 ""})\par
567             \{\par
568                 cur_property += css_input[i];\par
569                 log({\cf22 "IE7- hack detected: property name begins with '*'"}, Warning);\par
570             \} \par
571         \}\par
572         {\cf19 else}\par
573         \{\par
574             log({\cf22 "Unexpected character '"} + std::string(1, css_input[i]) + {\cf22 "'in property name"}, Error);\par
575         \}\par
576     \}\par
577     {\cf19 else} {\cf19 if}(!CSSUtils::ctype_space(css_input[i]))\par
578     \{\par
579         {\cf19 if}(css_input[i] == {\cf23 '_'} && cur_property == {\cf22 ""})\par
580         \{\par
581             {\cf20 // IE6 and below recognize properties that begin with '_'}\par
582             log({\cf22 "IE6 hack detected: property name begins with '_'"}, Warning);\par
583         \}\par
584         {\cf20 // TODO: Check for invalid characters}\par
585         cur_property += css_input[i];\par
586     \}\par
587     {\cf20 // TODO: Check for whitespace inside property names}\par
588 \}\par
}
{
\ql
References add_token(), CSSProperties::contains(), css_level, CSSUtils::ctype_space(), cur_property, cur_selector, Error, explode_selectors(), CSSProperties::instance(), is_token(), CSSProperties::levels(), log(), PIC, PIP, PIS, PIV, PROPERTY, CSSUtils::s_at(), SEL_END, unicode(), and Warning.}\par
{
\ql
Referenced by parse_css().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a32dc6fe98280dc01d92672b80989aa18_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a32dc6fe98280dc01d92672b80989aa18_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v parseInSelector\:CSSParser}
{\xe \v CSSParser\:parseInSelector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::parseInSelector (std::string &  {\i css_input}, int &  {\i i}, {\b parse_status} &  {\i astatus}, {\b parse_status} &  {\i afrom}, bool &  {\i invalid_at}, char &  {\i str_char}, int  {\i str_size}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 431 \{\par
432     {\cf19 if}(is_token(css_input,i))\par
433     \{\par
434         {\cf20 // if(css_input[i] == '/' && CSSUtils::s_at(css_input,i+1) == '*' && }\par
435         {\cf20 // trim(cur_selector) == "") selector as dep doesn't make any sense here, huh?}\par
436 \par
437 {\cf20 //         std::cout << "Css input: " << css_input[i] << std::endl;}\par
438         {\cf19 if}(css_input[i] == {\cf23 '/'} && CSSUtils::s_at(css_input,i+1) == {\cf23 '*'})\par
439         \{\par
440             astatus = PIC; ++i;\par
441             afrom = PIS;\par
442         \}\par
443         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '@'} && CSSUtils::trim(cur_selector) == {\cf22 ""})\par
444         \{\par
445             {\cf20 // Check for at-rule}\par
446             invalid_at = {\cf17 true};\par
447             {\cf19 for}(std::map<std::string,parse_status>::iterator j = at_rules.begin(); j != at_rules.end(); ++j )\par
448             \{\par
449                 {\cf19 if}(CSSUtils::strtolower(css_input.substr(i+1,j->first.length())) == j->first)\par
450                 \{\par
451                     (j->second == PAT) ? cur_at = {\cf22 "@"} + j->first : cur_selector = {\cf22 "@"} + j->first;\par
452                     astatus = j->second;\par
453                     i += j->first.length();\par
454                     invalid_at = {\cf17 false};\par
455                 \}\par
456             \}\par
457             {\cf19 if} (invalid_at)\par
458             \{\par
459                 cur_selector = {\cf22 "@"};\par
460                 std::string invalid_at_name = {\cf22 ""};\par
461                 {\cf19 for}({\cf18 int} j = i+1; j < str_size; ++j)\par
462                 \{\par
463                     {\cf19 if}(!CSSUtils::ctype_alpha(css_input[j]))\par
464                     \{\par
465                         {\cf19 return};\par
466                     \}\par
467                     invalid_at_name += css_input[j];\par
468                 \}\par
469                 log({\cf22 "Invalid @-rule: "} + invalid_at_name + {\cf22 " (removed)"},Warning);\par
470             \}\par
471         \}\par
472         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '"'} || css_input[i] == {\cf23 '\\''})\par
473         \{\par
474             cur_string = css_input[i];\par
475             astatus = PINSTR;\par
476             str_char = css_input[i];\par
477             afrom = PIS;\par
478         \}\par
479         {\cf19 else} {\cf19 if}(invalid_at && css_input[i] == {\cf23 ';'})\par
480         \{\par
481             invalid_at = {\cf17 false};\par
482             astatus = PIS;\par
483         \}\par
484         {\cf19 else} {\cf19 if} (css_input[i] == {\cf23 '\{'})\par
485         \{\par
486             astatus = PIP;\par
487             add_token(SEL_START, cur_selector);\par
488         \}\par
489         {\cf19 else} {\cf19 if} (css_input[i] == {\cf23 '\}'})\par
490         \{\par
491             add_token(AT_END, cur_at);\par
492             cur_at = {\cf22 ""};\par
493             cur_selector = {\cf22 ""};\par
494             sel_separate = std::vector<int>();\par
495         \}\par
496         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 ','})\par
497         \{\par
498             cur_selector = CSSUtils::trim(cur_selector) + {\cf22 ","};\par
499             sel_separate.push_back(cur_selector.length());\par
500         \}\par
501         {\cf19 else} {\cf19 if} (css_input[i] == {\cf23 '\\\\'})\par
502         \{\par
503             cur_selector += unicode(css_input,i);\par
504         \}\par
505         {\cf20 // remove unnecessary universal selector,  FS#147}\par
506         {\cf19 else} {\cf19 if}(!(css_input[i] == {\cf23 '*'} && (CSSUtils::s_at(css_input,i+1) == {\cf23 '.'} || CSSUtils::s_at(css_input,i+1) == {\cf23 '['} || CSSUtils::s_at(css_input,i+1) == {\cf23 ':'} || CSSUtils::s_at(css_input,i+1) == {\cf23 '#'})))\par
507         \{\par
508             cur_selector += css_input[i];\par
509         \}\par
510     \}\par
511     {\cf19 else}\par
512     \{\par
513         {\cf18 int} lastpos = cur_selector.length()-1;\par
514         {\cf19 if}((lastpos == -1) || !( (CSSUtils::ctype_space(cur_selector[lastpos]) ||\par
515                                   (is_token(cur_selector,lastpos) && cur_selector[lastpos] == {\cf23 ','})) &&\par
516                                  CSSUtils::ctype_space(css_input[i])))\par
517         \{\par
518             cur_selector += css_input[i];\par
519         \}\par
520     \}\par
521 \}\par
}
{
\ql
References add_token(), AT_END, at_rules, CSSUtils::ctype_alpha(), CSSUtils::ctype_space(), cur_at, cur_selector, cur_string, is_token(), log(), PAT, PIC, PINSTR, PIP, PIS, CSSUtils::s_at(), sel_separate, SEL_START, CSSUtils::strtolower(), CSSUtils::trim(), unicode(), and Warning.}\par
{
\ql
Referenced by parse_css().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_aaf22cc5c0057d4da557a5aac0bcb1fb9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_aaf22cc5c0057d4da557a5aac0bcb1fb9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v parseInString\:CSSParser}
{\xe \v CSSParser\:parseInString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::parseInString (std::string &  {\i css_input}, int &  {\i i}, {\b parse_status} &  {\i astatus}, {\b parse_status} &  {\i afrom}, char &  {\i str_char}, bool &  {\i str_in_str}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 814 \{\par
815 \par
816     {\cf19 if}(str_char == {\cf23 ')'} && (css_input[i] == {\cf23 '"'} || css_input[i] == {\cf23 '\\''}) &&\par
817        str_in_str == {\cf17 false} && !CSSUtils::escaped(css_input,i))\par
818     \{\par
819         str_in_str = {\cf17 true};\par
820     \}\par
821     {\cf19 else} {\cf19 if}(str_char == {\cf23 ')'} && (css_input[i] == {\cf23 '"'} || css_input[i] == {\cf23 '\\''}) &&\par
822             str_in_str == {\cf17 true} && !CSSUtils::escaped(css_input,i))\par
823     \{\par
824         str_in_str = {\cf17 false};\par
825     \}\par
826     std::string temp_add = {\cf22 ""}; temp_add += css_input[i];\par
827     {\cf19 if}( (css_input[i] == {\cf23 '\\n'} || css_input[i] == {\cf23 '\\r'}) &&\par
828         !(css_input[i-1] == {\cf23 '\\\\'} && !CSSUtils::escaped(css_input,i-1)) )\par
829     \{\par
830         temp_add = {\cf22 "\\\\A "};\par
831         log({\cf22 "Fixed incorrect newline in string"},Warning);\par
832     \}\par
833     {\cf19 if} (!(str_char == {\cf23 ')'} && \par
834           CSSUtils::char2str(css_input[i]).find_first_of({\cf22 " \\n\\t\\r\\0xb"}) != std::string::npos && !str_in_str))\par
835     \{\par
836         cur_string += temp_add;\par
837     \}\par
838     {\cf19 if}(css_input[i] == str_char && !CSSUtils::escaped(css_input,i) && str_in_str == {\cf17 false})\par
839     \{\par
840         astatus = afrom;\par
841         {\cf19 if} (cur_function == {\cf22 ""} && \par
842             cur_string.find_first_of({\cf22 " \\n\\t\\r\\0xb"}) == std::string::npos &&\par
843             cur_property != {\cf22 "content"} && cur_sub_value != {\cf22 "format"})\par
844         \{\par
845             {\cf20 // If the string is not inside a function call, contains no whitespace, }\par
846             {\cf20 // and the current property is not 'content', it may be safe to remove quotes.}\par
847             {\cf20 // TODO: Are there any properties other than 'content' where this is unsafe?}\par
848             {\cf20 // TODO: What if the string contains a comma or slash, and the property is a list or shorthand?}\par
849             {\cf19 if} (str_char == {\cf23 '"'} || str_char == {\cf23 '\\''})\par
850             \{\par
851                 {\cf20 // If the string is in double or single quotes, remove them}\par
852                 {\cf20 // FIXME: once url() is handled separately, this may always be the case.}\par
853                 cur_string = cur_string.substr(1, cur_string.length() - 2);\par
854             \} {\cf19 else} {\cf19 if} (cur_string.length() > 3 && (cur_string[1] == {\cf23 '"'} || cur_string[1] == {\cf23 '\\''})) {\cf20 /* () */} \par
855             \{\par
856                 cur_string = cur_string[0] + cur_string.substr(2, cur_string.length() - 4) + cur_string[cur_string.length()-1];\par
857             \}\par
858         \}\par
859         {\cf19 if}(afrom == PIV)\par
860         \{\par
861             cur_sub_value += cur_string;\par
862         \}\par
863         {\cf19 else} {\cf19 if}(afrom == PIS)\par
864         \{\par
865             cur_selector += cur_string;\par
866         \}\par
867     \}\par
868 \}\par
}
{
\ql
References CSSUtils::char2str(), cur_function, cur_property, cur_selector, cur_string, cur_sub_value, CSSUtils::escaped(), log(), PIS, PIV, and Warning.}\par
{
\ql
Referenced by parse_css().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a6a3a8f75a3b06ab1c70cfc1c918f473e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a6a3a8f75a3b06ab1c70cfc1c918f473e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v parseInValue\:CSSParser}
{\xe \v CSSParser\:parseInValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::parseInValue (std::string &  {\i css_input}, int &  {\i i}, {\b parse_status} &  {\i astatus}, {\b parse_status} &  {\i afrom}, bool &  {\i invalid_at}, char &  {\i str_char}, bool &  {\i pn}, int  {\i str_size}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 593 \{\par
594     pn = (((css_input[i] == {\cf23 '\\n'} || css_input[i] == {\cf23 '\\r'}) && property_is_next(css_input,i+1)) || i == str_size-1);\par
595     {\cf19 if}(pn)\par
596     \{\par
597         log({\cf22 "Added semicolon to the end of declaration"},Warning);\par
598     \}\par
599     std::cout << {\cf22 "Pin: "} << pn << std::endl;\par
600     {\cf19 if}(is_token(css_input,i) || pn)\par
601     \{\par
602         std::cout << {\cf22 "PIV "} << css_input[i] << {\cf22 " Is Token"}<< std::endl;\par
603 \par
604         {\cf19 if}((css_input[i] == {\cf23 '\{'}) && (cur_selector == {\cf22 "@import"} ||\par
605                                      cur_selector == {\cf22 "@charset"} ||\par
606                                      cur_selector == {\cf22 "@namespace"}))\par
607         \{\par
608             log({\cf22 "Unexpected character '"} + std::string(1, css_input[i]) + {\cf22 "' in "} + cur_selector, Error);\par
609         \}\par
610         {\cf19 if}(css_input[i] == {\cf23 '/'} && CSSUtils::s_at(css_input,i+1) == {\cf23 '*'})\par
611         \{\par
612             astatus = PIC; ++i;\par
613             afrom = PIV;\par
614         \}\par
615         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '"'} || css_input[i] == {\cf23 '\\''} ||\par
616                 (css_input[i] == {\cf23 '('} && cur_sub_value == {\cf22 "url"}) )\par
617         \{\par
618             str_char = (css_input[i] == {\cf23 '('}) ? {\cf23 ')'} : css_input[i];\par
619             cur_string = css_input[i];\par
620             astatus = PINSTR;\par
621             afrom = PIV;\par
622         \}\par
623         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '('})\par
624         \{\par
625             {\cf20 // function call or an open parenthesis in a calc() expression}\par
626             {\cf20 // url() is a special case that should have been handled above}\par
627             assert(cur_sub_value != {\cf22 "url"});\par
628                     \par
629             {\cf20 // cur_sub_value should contain the name of the function, if any}\par
630             cur_sub_value = CSSUtils::trim(cur_sub_value + {\cf22 "("});\par
631             {\cf20 // set current function name and push it onto the stack}\par
632             cur_function = cur_sub_value;\par
633             cur_function_arr.push_back(cur_sub_value);\par
634             cur_sub_value_arr.push_back(cur_sub_value);\par
635             cur_sub_value = {\cf22 ""};\par
636         \}\par
637         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 '\\\\'})\par
638         \{\par
639             cur_sub_value += unicode(css_input,i);\par
640         \}\par
641         {\cf19 else} {\cf19 if}(css_input[i] == {\cf23 ';'} || pn)\par
642         \{\par
643             {\cf19 if}(cur_selector.substr(0,1) == {\cf22 "@"} && \par
644                at_rules.count(cur_selector.substr(1)) > 0 &&\par
645                at_rules[cur_selector.substr(1)] == PIV)\par
646             \{\par
647                 cur_sub_value_arr.push_back(CSSUtils::trim(cur_sub_value));\par
648                 astatus = PIS;\par
649 \par
650                 {\cf19 if}(cur_selector == {\cf22 "@charset"})\par
651                 \{\par
652                      charset = cur_sub_value_arr[0];\par
653                      add_token(CHARSET, charset);\par
654                 \}\par
655                 {\cf19 else} {\cf19 if}(cur_selector == {\cf22 "@import"})\par
656                 \{\par
657                      std::string aimport = CSSUtils::build_value(cur_sub_value_arr);\par
658                      add_token(IMPORT, aimport);\par
659                      {\cf17 import}.push_back(aimport);\par
660                 \}\par
661                 {\cf19 else} {\cf19 if}(cur_selector == {\cf22 "@namespace"})\par
662                 \{\par
663                     namesp = CSSUtils::implode({\cf22 " "},cur_sub_value_arr);\par
664                     add_token(NAMESP, namesp);\par
665                 \}\par
666                 cur_sub_value_arr.clear();\par
667                 cur_sub_value = {\cf22 ""};\par
668                 cur_selector = {\cf22 ""};\par
669                 sel_separate = std::vector<int>();\par
670             \}\par
671             {\cf19 else}\par
672             \{\par
673                 astatus = PIP;\par
674             \}\par
675         \}\par
676         {\cf19 else} {\cf19 if} (css_input[i] == {\cf23 '!'}) \par
677         \{\par
678             cur_sub_value_arr.push_back(CSSUtils::trim(cur_sub_value));\par
679             cur_sub_value = {\cf22 "!"};\par
680         \}\par
681         {\cf19 else} {\cf19 if} (css_input[i] == {\cf23 ','} || css_input[i] == {\cf23 ')'}) \par
682         \{\par
683             {\cf20 // store the current subvalue, if any}\par
684             cur_sub_value = CSSUtils::trim(cur_sub_value);\par
685             {\cf19 if}(cur_sub_value != {\cf22 ""})\par
686             \{\par
687                 cur_sub_value_arr.push_back(cur_sub_value);\par
688                 cur_sub_value = {\cf22 ""};\par
689             \}\par
690             {\cf18 bool} drop = {\cf17 false};\par
691             {\cf19 if} (css_input[i] == {\cf23 ')'})\par
692             \{\par
693                 {\cf19 if} (cur_function_arr.empty())\par
694                 \{\par
695                     {\cf20 // No matching open parenthesis, drop this closing one}\par
696                     log({\cf22 "Unexpected closing parenthesis, dropping"}, Warning);\par
697                     drop = {\cf17 true};\par
698                 \}\par
699                 {\cf19 else}\par
700                 \{\par
701                     {\cf20 // Pop function from the stack}\par
702                     cur_function_arr.pop_back();\par
703                     cur_function = cur_function_arr.empty() ? {\cf22 ""} : cur_function_arr.back();\par
704                             \par
705                 \}\par
706             \}\par
707             {\cf19 if} (!drop) \{\par
708                 cur_sub_value_arr.push_back(std::string(1,css_input[i]));\par
709             \}\par
710         \}\par
711         {\cf19 else} {\cf19 if}(css_input[i] != {\cf23 '\}'})\par
712         \{\par
713             cur_sub_value += css_input[i];\par
714         \}\par
715         {\cf19 if}( (css_input[i] == {\cf23 '\}'} || css_input[i] == {\cf23 ';'} || pn) && !cur_selector.empty())\par
716         \{\par
717             {\cf20 // End of value: normalize, optimize and store property}\par
718             {\cf19 if}(cur_at == {\cf22 ""})\par
719             \{\par
720                 cur_at = {\cf22 "standard"};\par
721             \}\par
722 \par
723             {\cf20 // Kill all whitespace}\par
724             cur_at = CSSUtils::trim(cur_at);\par
725             cur_selector = CSSUtils::trim(cur_selector);\par
726             cur_value = CSSUtils::trim(cur_value);\par
727             cur_property = CSSUtils::trim(cur_property);\par
728             cur_sub_value = CSSUtils::trim(cur_sub_value);\par
729 \par
730             cur_property = CSSUtils::strtolower(cur_property);\par
731 \par
732             {\cf19 if}(cur_sub_value != {\cf22 ""})\par
733             \{\par
734                 cur_sub_value_arr.push_back(cur_sub_value);\par
735                 cur_sub_value = {\cf22 ""};\par
736             \}\par
737 \par
738             {\cf20 // Check for leftover open parentheses}\par
739             {\cf19 if} (!cur_function_arr.empty())\par
740             \{\par
741                 std::vector<std::string>::reverse_iterator rit;\par
742                 {\cf19 for} (rit = cur_function_arr.rbegin(); rit != cur_function_arr.rend(); ++rit)\par
743                 \{\par
744                     log({\cf22 "Closing parenthesis missing for '"} + *rit + {\cf22 "', inserting"}, Warning);\par
745                     cur_sub_value_arr.push_back({\cf22 ")"});\par
746                 \}\par
747             \}\par
748 \par
749             cur_value = CSSUtils::build_value(cur_sub_value_arr);\par
750 \par
751 \par
752             {\cf18 bool} valid = (CSSProperties::instance()->contains(cur_property) &&\par
753                           CSSProperties::instance()->levels(cur_property).find(css_level,0) != std::string::npos);\par
754             {\cf19 if}(1)\par
755             \{\par
756                 {\cf20 //add(cur_at,cur_selector,cur_property,cur_value);}\par
757                 add_token(VALUE, cur_value);\par
758             \}\par
759             {\cf19 if}(!valid)\par
760             \{\par
761                 log({\cf22 "Invalid property in "} + CSSUtils::strtoupper(css_level) + {\cf22 ": "} + cur_property,Warning);\par
762             \}\par
763 \par
764             {\cf20 //Split multiple selectors here if necessary}\par
765             cur_property = {\cf22 ""};\par
766             cur_sub_value_arr.clear();\par
767             cur_value = {\cf22 ""};\par
768         \}\par
769         {\cf19 if}(css_input[i] == {\cf23 '\}'})\par
770         \{\par
771             explode_selectors();\par
772             add_token(SEL_END, cur_selector);\par
773             astatus = PIS;\par
774             invalid_at = {\cf17 false};\par
775             cur_selector = {\cf22 ""};\par
776         \}\par
777     \}\par
778     {\cf19 else} {\cf19 if}(!pn)\par
779     \{\par
780         cur_sub_value += css_input[i];\par
781 \par
782         {\cf19 if}(CSSUtils::ctype_space(css_input[i]))\par
783         \{\par
784             {\cf19 if}(CSSUtils::trim(cur_sub_value) != {\cf22 ""})\par
785             \{\par
786                 cur_sub_value_arr.push_back(CSSUtils::trim(cur_sub_value));\par
787             \}\par
788             cur_sub_value = {\cf22 ""};\par
789         \}\par
790     \}\par
791 \}\par
}
{
\ql
References add_token(), at_rules, CSSUtils::build_value(), CHARSET, charset, CSSProperties::contains(), css_level, CSSUtils::ctype_space(), cur_at, cur_function, cur_function_arr, cur_property, cur_selector, cur_string, cur_sub_value, cur_sub_value_arr, cur_value, Error, explode_selectors(), CSSUtils::implode(), IMPORT, CSSProperties::instance(), is_token(), CSSProperties::levels(), log(), NAMESP, namesp, PIC, PINSTR, PIP, PIS, PIV, property_is_next(), CSSUtils::s_at(), SEL_END, sel_separate, CSSUtils::strtolower(), CSSUtils::strtoupper(), CSSUtils::trim(), unicode(), VALUE, and Warning.}\par
{
\ql
Referenced by parse_css().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_aaa383d4fe9d49e02c81863beb0f8fc73_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_aaa383d4fe9d49e02c81863beb0f8fc73_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v property_is_next\:CSSParser}
{\xe \v CSSParser\:property_is_next}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSParser::property_is_next (std::string  {\i istring}, int  {\i pos}){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 955 \{\par
956     istring = istring.substr(pos,istring.length()-pos);\par
957     pos = istring.find_first_of({\cf23 ':'},0);\par
958     {\cf19 if}(pos == std::string::npos)\par
959     \{\par
960         {\cf19 return} {\cf17 false};\par
961     \}\par
962     istring = CSSUtils::strtolower(CSSUtils::trim(istring.substr(0,pos)));\par
963     {\cf19 return} CSSProperties::instance()->contains(istring);\par
964 \}\par
}
{
\ql
References CSSProperties::contains(), CSSProperties::instance(), CSSUtils::strtolower(), and CSSUtils::trim().}\par
{
\ql
Referenced by parseInValue().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a99ea850f09dd79823e266af528abcc70_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a99ea850f09dd79823e266af528abcc70_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v record_position\:CSSParser}
{\xe \v CSSParser\:record_position}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::record_position ({\b parse_status}  {\i old_status}, {\b parse_status}  {\i new_status}, std::string &  {\i css_input}, int  {\i i}, bool  {\i force} = {\f2 false}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1019 \{\par
1020     {\cf20 // to reach here old_status must be != new_status}\par
1021     {\cf18 bool} record = {\cf17 false};\par
1022 \par
1023     {\cf20 // any state into a  comment}\par
1024     {\cf19 if} (new_status == PIC) record = {\cf17 true};\par
1025 \par
1026     {\cf20 // start of a property}\par
1027     {\cf19 if} ((old_status == PIS) && (new_status == PIP)) record = {\cf17 true};\par
1028     {\cf19 if} ((old_status == PIV) && (new_status == PIP)) record = {\cf17 true};\par
1029 \par
1030     {\cf20 // from properties to values or from @charset, @namespace, and @import into values}\par
1031     {\cf19 if} ((old_status == PAT) && (new_status == PIV)) record = {\cf17 true};\par
1032     {\cf19 if} ((old_status == PIP) && (new_status == PIV)) record = {\cf17 true};\par
1033 \par
1034     {\cf20 // starting a new selector}\par
1035     {\cf19 if} ((old_status == PAT) && (new_status == PIS)) record = {\cf17 true};\par
1036     {\cf19 if} ((old_status == PIV) && (new_status == PIS)) record = {\cf17 true};\par
1037     {\cf19 if} ((old_status == PIP) && (new_status == PIS)) record = {\cf17 true};\par
1038 \par
1039     {\cf19 if} (record || force) \{\par
1040         spos = css_input.find_first_not_of({\cf22 " \\n\\t\\r\\0xb"}, i);\par
1041         sline = line;\par
1042         std::cout << {\cf22 "Start Posistion: "} << spos << {\cf22 " Start Line: "} << sline << std::endl;\par
1043         {\cf19 for}({\cf18 int} j = i+i; j <= spos; j++)\par
1044         \{\par
1045             {\cf19 if} (css_input[j] == {\cf23 '\\n'}) sline++;\par
1046         \}\par
1047     \}\par
1048 \}\par
}
{
\ql
References line, PAT, PIC, PIP, PIS, PIV, sline, and spos.}\par
{
\ql
Referenced by parse_css().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a2720c438abcb8e7a379f4cce8bfbe06c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v reset_parser\:CSSParser}
{\xe \v CSSParser\:reset_parser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::reset_parser ()}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 115 \{\par
116     token_ptr = 0;\par
117     charset = {\cf22 ""};\par
118     namesp = {\cf22 ""};\par
119     selector_nest_level = 0;\par
120     line = 1;\par
121     {\cf17 import}.clear();\par
122     csstokens.clear();\par
123     cur_selector.clear();\par
124     cur_at.clear();\par
125     cur_property.clear();\par
126     cur_function.clear();\par
127     cur_sub_value.clear();\par
128     cur_value.clear();\par
129     cur_string.clear();\par
130     cur_selector.clear();\par
131     sel_separate.clear();\par
132 \}\par
}
{
\ql
References charset, csstokens, cur_at, cur_function, cur_property, cur_selector, cur_string, cur_sub_value, cur_value, line, namesp, sel_separate, selector_nest_level, and token_ptr.}\par
{
\ql
Referenced by parse_css().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_ac63c0fc4f74f852dbb4e31c14743e1bb_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v serialize_css\:CSSParser}
{\xe \v CSSParser\:serialize_css}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::serialize_css (std::string  {\i filename} = {\f2 ""}, bool  {\i tostdout} = {\f2 true})}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 287 \{\par
288     {\cf19 if}(charset == {\cf22 ""} && namesp == {\cf22 ""} && {\cf17 import}.empty() && csstokens.empty())\par
289     \{\par
290         std::cout << {\cf22 "Warning: empty CSS output!"} << std::endl;\par
291     \}\par
292 \par
293     std::ofstream file_output;\par
294     {\cf19 if}(filename != {\cf22 ""})\par
295     \{\par
296          file_output.open(filename.c_str(),std::ios::binary);\par
297          {\cf19 if}(file_output.bad())\par
298          \{\par
299              std::cout << {\cf22 "Error when trying to save the output file!"} << std::endl;\par
300              {\cf19 return} {\cf22 ""};\par
301          \}\par
302     \}\par
303 \par
304     std::stringstream output;\par
305     {\cf18 int} lvl = 0;\par
306     std::string indent = {\cf22 ""};\par
307 \par
308     {\cf19 for} ({\cf18 int} i = 0; i < csstokens.size(); ++i)\par
309     \{\par
310         {\cf19 switch} (csstokens[i].type)\par
311         \{\par
312             {\cf19 case} CHARSET:\par
313                 output << {\cf22 "@charset "} << csstemplate[5] << csstokens[i].data << csstemplate[6];\par
314                 {\cf19 break};\par
315 \par
316             {\cf19 case} IMPORT:\par
317                 indent = CSSUtils::indent(lvl, csstemplate[0]);\par
318                 output << indent << {\cf22 "@import "} << csstemplate[5] << csstokens[i].data << csstemplate[6];\par
319                 {\cf19 break};\par
320 \par
321             {\cf19 case} NAMESP:\par
322                 output << {\cf22 "@namespace "} << csstemplate[5] << csstokens[i].data << csstemplate[6];\par
323                 {\cf19 break};\par
324 \par
325             {\cf19 case} AT_START:\par
326                 indent = CSSUtils::indent(lvl, csstemplate[0]);\par
327                 output << indent << csstokens[i].data << csstemplate[1];\par
328                 lvl++;\par
329                 {\cf19 break};\par
330 \par
331             {\cf19 case} SEL_START:\par
332                 indent = CSSUtils::indent(lvl, csstemplate[0]);\par
333                 output << indent << csstokens[i].data << csstemplate[3];\par
334                 lvl++;\par
335                 {\cf19 break};\par
336 \par
337             {\cf19 case} PROPERTY:\par
338                 indent = CSSUtils::indent(lvl, csstemplate[0]);\par
339                 output << indent << csstokens[i].data << {\cf22 ":"} << csstemplate[5];\par
340                 {\cf19 break};\par
341 \par
342             {\cf19 case} VALUE:\par
343                 output << csstokens[i].data << csstemplate[6];\par
344                 {\cf19 break};\par
345 \par
346             {\cf19 case} SEL_END:\par
347                 lvl--; {\cf19 if} (lvl < 0) lvl = 0;\par
348                 indent = CSSUtils::indent(lvl, csstemplate[0]);\par
349                 output << indent + csstemplate[7];\par
350                 {\cf19 if}(_seeknocomment(i, 1) != AT_END) output << csstemplate[8];\par
351                 {\cf19 break};\par
352 \par
353             {\cf19 case} AT_END:\par
354                 lvl--; {\cf19 if} (lvl < 0) lvl = 0;\par
355                 indent = CSSUtils::indent(lvl, csstemplate[0]);\par
356                 output << csstemplate[13] << indent << csstemplate[9];\par
357                 {\cf19 break};\par
358 \par
359             {\cf19 case} COMMENT:\par
360                 output << csstemplate[11] <<  {\cf22 "/*"} << csstokens[i].data << {\cf22 "*/"} << csstemplate[12];\par
361                 {\cf19 break};\par
362 \par
363             {\cf19 case} CSS_END:\par
364                 {\cf19 break};\par
365         \}\par
366     \}\par
367 \par
368     std::string output_string = CSSUtils::trim(output.str());\par
369 \par
370     {\cf19 if}(tostdout)\par
371     \{\par
372         std::cout << output_string << {\cf22 "\\n"};\par
373     \}\par
374     {\cf19 if}(filename != {\cf22 ""})\par
375     \{\par
376         file_output << output_string;\par
377         file_output.close();\par
378     \}\par
379     {\cf19 return} output_string;\par
380 \}\par
}
{
\ql
References _seeknocomment(), AT_END, AT_START, CHARSET, charset, COMMENT, CSS_END, csstemplate, csstokens, IMPORT, CSSUtils::indent(), NAMESP, namesp, PROPERTY, SEL_END, SEL_START, CSSUtils::trim(), and VALUE.}\par
{
\ql
Referenced by main().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_abf3218756a160dfe0cf0f0d5eddbb4f8_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_abf3218756a160dfe0cf0f0d5eddbb4f8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v set_csstokens\:CSSParser}
{\xe \v CSSParser\:set_csstokens}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::set_csstokens (const std::vector< {\b token} > &  {\i ntokens})}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1006 \{\par
1007     csstokens.clear();\par
1008     {\cf19 for}({\cf18 int} i = 0; i < ntokens.size(); i++)\par
1009     \{\par
1010         token atemp = ntokens[i];\par
1011         csstokens.push_back(atemp);\par
1012     \}\par
1013 \}\par
}
{
\ql
References csstokens.}\par
}
{\xe \v set_level\:CSSParser}
{\xe \v CSSParser\:set_level}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void CSSParser::set_level (std::string  {\i level} = {\f2 "CSS3.0"})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 105 \{\par
106     {\cf19 if} ((level == {\cf22 "CSS1.0"}) || (level == {\cf22 "CSS2.0"}) ||\par
107         (level == {\cf22 "CSS2.1"}) || (level == {\cf22 "CSS3.0"}))\par
108     \{\par
109         css_level = level;\par
110     \}\par
111 \}\par
}
{
\ql
References css_level.}\par
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a5c5f1403cde53dd4ca994ce655fa165b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v unicode\:CSSParser}
{\xe \v CSSParser\:unicode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::unicode (std::string &  {\i istring}, int &  {\i i}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 213 \{\par
214     ++i;\par
215     std::string add = {\cf22 ""};\par
216     {\cf18 bool} replaced = {\cf17 false};\par
217     \par
218     {\cf19 while}(i < istring.length() && (CSSUtils::ctype_xdigit(istring[i]) ||\par
219                                    CSSUtils::ctype_space(istring[i])) && add.length()< 6)\par
220     \{\par
221         add += istring[i];\par
222 \par
223         {\cf19 if}(CSSUtils::ctype_space(istring[i])) \{\par
224             {\cf19 break};\par
225         \}\par
226         i++;\par
227     \}\par
228 \par
229     {\cf19 if} ((CSSUtils::hexdec(add) > 47 && CSSUtils::hexdec(add) < 58) ||\par
230         (CSSUtils::hexdec(add) > 64 && CSSUtils::hexdec(add) < 91) ||\par
231         (CSSUtils::hexdec(add) > 96 && CSSUtils::hexdec(add) < 123))\par
232     \{\par
233         std::string msg = {\cf22 "Replaced unicode notation: Changed \\\\"} + CSSUtils::rtrim(add) + {\cf22 " to "};\par
234         add = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(CSSUtils::hexdec(add));\par
235         msg += add;\par
236         log(msg,Information);\par
237         replaced = {\cf17 true};\par
238     \} {\cf19 else} \{\par
239         add = CSSUtils::trim({\cf22 "\\\\"} + add);\par
240     \}\par
241 \par
242     {\cf19 if} ((CSSUtils::ctype_xdigit(istring[i+1]) && CSSUtils::ctype_space(istring[i])\par
243          && !replaced) || !CSSUtils::ctype_space(istring[i]))\par
244     \{\par
245         i--;\par
246     \}\par
247     \par
248     {\cf19 if} (1) \{\par
249         {\cf19 return} add;\par
250     \}\par
251     {\cf19 return} {\cf22 ""};\par
252 \}\par
}
{
\ql
References CSSUtils::ctype_space(), CSSUtils::ctype_xdigit(), CSSUtils::hexdec(), Information, log(), CSSUtils::rtrim(), and CSSUtils::trim().}\par
{
\ql
Referenced by parseInAtBlock(), parseInProperty(), parseInSelector(), and parseInValue().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a3b3c43c82269a46bcbdc36fb2ba2bb68_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSParser_a3b3c43c82269a46bcbdc36fb2ba2bb68_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v at_rules\:CSSParser}
{\xe \v CSSParser\:at_rules}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::map<std::string, {\b parse_status}> CSSParser::at_rules{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by CSSParser(), parseInSelector(), and parseInValue().}\par
}
{\xe \v charset\:CSSParser}
{\xe \v CSSParser\:charset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::charset{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by get_charset(), parseInValue(), reset_parser(), and serialize_css().}\par
}
{\xe \v css_level\:CSSParser}
{\xe \v CSSParser\:css_level}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::css_level{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by CSSParser(), parseInProperty(), parseInValue(), and set_level().}\par
}
{\xe \v csstemplate\:CSSParser}
{\xe \v CSSParser\:csstemplate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::string> CSSParser::csstemplate{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by CSSParser(), and serialize_css().}\par
}
{\xe \v csstokens\:CSSParser}
{\xe \v CSSParser\:csstokens}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<{\b token}> CSSParser::csstokens{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by _seeknocomment(), add_token(), get_next_token(), reset_parser(), serialize_css(), and set_csstokens().}\par
}
{\xe \v cur_at\:CSSParser}
{\xe \v CSSParser\:cur_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::cur_at{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parseInAtBlock(), parseInSelector(), parseInValue(), and reset_parser().}\par
}
{\xe \v cur_function\:CSSParser}
{\xe \v CSSParser\:cur_function}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::cur_function{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parseInString(), parseInValue(), and reset_parser().}\par
}
{\xe \v cur_function_arr\:CSSParser}
{\xe \v CSSParser\:cur_function_arr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::string> CSSParser::cur_function_arr{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parse_css(), and parseInValue().}\par
}
{\xe \v cur_property\:CSSParser}
{\xe \v CSSParser\:cur_property}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::cur_property{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parseInProperty(), parseInString(), parseInValue(), and reset_parser().}\par
}
{\xe \v cur_selector\:CSSParser}
{\xe \v CSSParser\:cur_selector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::cur_selector{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parseInProperty(), parseInSelector(), parseInString(), parseInValue(), and reset_parser().}\par
}
{\xe \v cur_string\:CSSParser}
{\xe \v CSSParser\:cur_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::cur_string{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parseInSelector(), parseInString(), parseInValue(), and reset_parser().}\par
}
{\xe \v cur_sub_value\:CSSParser}
{\xe \v CSSParser\:cur_sub_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::cur_sub_value{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parseInString(), parseInValue(), and reset_parser().}\par
}
{\xe \v cur_sub_value_arr\:CSSParser}
{\xe \v CSSParser\:cur_sub_value_arr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::string> CSSParser::cur_sub_value_arr{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parse_css(), and parseInValue().}\par
}
{\xe \v cur_value\:CSSParser}
{\xe \v CSSParser\:cur_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::cur_value{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by parseInValue(), and reset_parser().}\par
}
{\xe \v import\:CSSParser}
{\xe \v CSSParser\:import}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::string> CSSParser::import{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v line\:CSSParser}
{\xe \v CSSParser\:line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CSSParser::line{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by log(), parse_css(), record_position(), and reset_parser().}\par
}
{\xe \v logs\:CSSParser}
{\xe \v CSSParser\:logs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::map<int, std::vector<{\b message}> > CSSParser::logs{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by get_logs(), and log().}\par
}
{\xe \v namesp\:CSSParser}
{\xe \v CSSParser\:namesp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::namesp{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by get_namespace(), parseInValue(), reset_parser(), and serialize_css().}\par
}
{\xe \v sel_separate\:CSSParser}
{\xe \v CSSParser\:sel_separate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<int> CSSParser::sel_separate{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by explode_selectors(), parseInSelector(), parseInValue(), and reset_parser().}\par
}
{\xe \v selector_nest_level\:CSSParser}
{\xe \v CSSParser\:selector_nest_level}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CSSParser::selector_nest_level{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by add_token(), parse_css(), and reset_parser().}\par
}
{\xe \v sline\:CSSParser}
{\xe \v CSSParser\:sline}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CSSParser::sline{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by add_token(), and record_position().}\par
}
{\xe \v spos\:CSSParser}
{\xe \v CSSParser\:spos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CSSParser::spos{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by add_token(), and record_position().}\par
}
{\xe \v token_ptr\:CSSParser}
{\xe \v CSSParser\:token_ptr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int CSSParser::token_ptr{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by get_next_token(), and reset_parser().}\par
}
{\xe \v token_type_names\:CSSParser}
{\xe \v CSSParser\:token_type_names}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::string> CSSParser::token_type_names{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by CSSParser(), and get_type_name().}\par
}
{\xe \v tokens\:CSSParser}
{\xe \v CSSParser\:tokens}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSParser::tokens{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by CSSParser(), and is_token().}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CSSProperties Class Reference\par \pard\plain 
{\tc\tcl2 \v CSSProperties}
{\xe \v CSSProperties}
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
\par
{
{\f2 #include <CSSProperties.h>}}\par
Collaboration diagram for CSSProperties:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSProperties__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b contains} (std::string pname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b levels} (std::string pname)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b CSSProperties} * {\b instance} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b CSSProperties} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::map< std::string, std::string > {\b m_all_properties}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b CSSProperties} * {\b m_instance} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Singleton.\par
{\b CSSProperties} \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v CSSProperties\:CSSProperties}
{\xe \v CSSProperties\:CSSProperties}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
CSSProperties::CSSProperties (){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 62 \{\par
63     {\cf19 if} (m_all_properties.empty()) \{\par
64         m_all_properties[{\cf22 "alignment-adjust"}] = {\cf22 "CSS3.0"};\par
65         m_all_properties[{\cf22 "alignment-baseline"}] = {\cf22 "CSS3.0"};\par
66         m_all_properties[{\cf22 "animation"}] = {\cf22 "CSS3.0"};\par
67         m_all_properties[{\cf22 "animation-delay"}] = {\cf22 "CSS3.0"};\par
68         m_all_properties[{\cf22 "animation-direction"}] = {\cf22 "CSS3.0"};\par
69         m_all_properties[{\cf22 "animation-duration"}] = {\cf22 "CSS3.0"};\par
70         m_all_properties[{\cf22 "animation-iteration-count"}] = {\cf22 "CSS3.0"};\par
71         m_all_properties[{\cf22 "animation-name"}] = {\cf22 "CSS3.0"};\par
72         m_all_properties[{\cf22 "animation-play-state"}] = {\cf22 "CSS3.0"};\par
73         m_all_properties[{\cf22 "animation-timing-function"}] = {\cf22 "CSS3.0"};\par
74         m_all_properties[{\cf22 "appearance"}] = {\cf22 "CSS3.0"};\par
75         m_all_properties[{\cf22 "azimuth"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
76         m_all_properties[{\cf22 "backface-visibility"}] = {\cf22 "CSS3.0"};\par
77         m_all_properties[{\cf22 "background"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
78         m_all_properties[{\cf22 "background-attachment"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
79         m_all_properties[{\cf22 "background-clip"}] = {\cf22 "CSS3.0"};\par
80         m_all_properties[{\cf22 "background-color"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
81         m_all_properties[{\cf22 "background-image"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
82         m_all_properties[{\cf22 "background-origin"}] = {\cf22 "CSS3.0"};\par
83         m_all_properties[{\cf22 "background-position"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
84         m_all_properties[{\cf22 "background-repeat"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
85         m_all_properties[{\cf22 "background-size"}] = {\cf22 "CSS3.0"};\par
86         m_all_properties[{\cf22 "baseline-shift"}] = {\cf22 "CSS3.0"};\par
87         m_all_properties[{\cf22 "binding"}] = {\cf22 "CSS3.0"};\par
88         m_all_properties[{\cf22 "bleed"}] = {\cf22 "CSS3.0"};\par
89         m_all_properties[{\cf22 "bookmark-label"}] = {\cf22 "CSS3.0"};\par
90         m_all_properties[{\cf22 "bookmark-level"}] = {\cf22 "CSS3.0"};\par
91         m_all_properties[{\cf22 "bookmark-state"}] = {\cf22 "CSS3.0"};\par
92         m_all_properties[{\cf22 "bookmark-target"}] = {\cf22 "CSS3.0"};\par
93         m_all_properties[{\cf22 "border"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
94         m_all_properties[{\cf22 "border-bottom"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
95         m_all_properties[{\cf22 "border-bottom-color"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
96         m_all_properties[{\cf22 "border-bottom-left-radius"}] = {\cf22 "CSS3.0"};\par
97         m_all_properties[{\cf22 "border-bottom-right-radius"}] = {\cf22 "CSS3.0"};\par
98         m_all_properties[{\cf22 "border-bottom-style"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
99         m_all_properties[{\cf22 "border-bottom-width"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
100         m_all_properties[{\cf22 "border-collapse"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
101         m_all_properties[{\cf22 "border-color"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
102         m_all_properties[{\cf22 "border-image"}] = {\cf22 "CSS3.0"};\par
103         m_all_properties[{\cf22 "border-image-outset"}] = {\cf22 "CSS3.0"};\par
104         m_all_properties[{\cf22 "border-image-repeat"}] = {\cf22 "CSS3.0"};\par
105         m_all_properties[{\cf22 "border-image-slice"}] = {\cf22 "CSS3.0"};\par
106         m_all_properties[{\cf22 "border-image-source"}] = {\cf22 "CSS3.0"};\par
107         m_all_properties[{\cf22 "border-image-width"}] = {\cf22 "CSS3.0"};\par
108         m_all_properties[{\cf22 "border-left"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
109         m_all_properties[{\cf22 "border-left-color"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
110         m_all_properties[{\cf22 "border-left-style"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
111         m_all_properties[{\cf22 "border-left-width"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
112         m_all_properties[{\cf22 "border-radius"}] = {\cf22 "CSS3.0"};\par
113         m_all_properties[{\cf22 "border-right"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
114         m_all_properties[{\cf22 "border-right-color"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
115         m_all_properties[{\cf22 "border-right-style"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
116         m_all_properties[{\cf22 "border-right-width"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
117         m_all_properties[{\cf22 "border-spacing"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
118         m_all_properties[{\cf22 "border-style"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
119         m_all_properties[{\cf22 "border-top"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
120         m_all_properties[{\cf22 "border-top-color"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
121         m_all_properties[{\cf22 "border-top-left-radius"}] = {\cf22 "CSS3.0"};\par
122         m_all_properties[{\cf22 "border-top-right-radius"}] = {\cf22 "CSS3.0"};\par
123         m_all_properties[{\cf22 "border-top-style"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
124         m_all_properties[{\cf22 "border-top-width"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
125         m_all_properties[{\cf22 "border-width"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
126         m_all_properties[{\cf22 "bottom"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
127         m_all_properties[{\cf22 "box-decoration-break"}] = {\cf22 "CSS3.0"};\par
128         m_all_properties[{\cf22 "box-shadow"}] = {\cf22 "CSS3.0"};\par
129         m_all_properties[{\cf22 "box-sizing"}] = {\cf22 "CSS3.0"};\par
130         m_all_properties[{\cf22 "break-after"}] = {\cf22 "CSS3.0"};\par
131         m_all_properties[{\cf22 "break-before"}] = {\cf22 "CSS3.0"};\par
132         m_all_properties[{\cf22 "break-inside"}] = {\cf22 "CSS3.0"};\par
133         m_all_properties[{\cf22 "caption-side"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
134         m_all_properties[{\cf22 "clear"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
135         m_all_properties[{\cf22 "clip"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
136         m_all_properties[{\cf22 "color"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
137         m_all_properties[{\cf22 "color-profile"}] = {\cf22 "CSS3.0"};\par
138         m_all_properties[{\cf22 "column-count"}] = {\cf22 "CSS3.0"};\par
139         m_all_properties[{\cf22 "column-fill"}] = {\cf22 "CSS3.0"};\par
140         m_all_properties[{\cf22 "column-gap"}] = {\cf22 "CSS3.0"};\par
141         m_all_properties[{\cf22 "column-rule"}] = {\cf22 "CSS3.0"};\par
142         m_all_properties[{\cf22 "column-rule-color"}] = {\cf22 "CSS3.0"};\par
143         m_all_properties[{\cf22 "column-rule-style"}] = {\cf22 "CSS3.0"};\par
144         m_all_properties[{\cf22 "column-rule-width"}] = {\cf22 "CSS3.0"};\par
145         m_all_properties[{\cf22 "column-span"}] = {\cf22 "CSS3.0"};\par
146         m_all_properties[{\cf22 "column-width"}] = {\cf22 "CSS3.0"};\par
147         m_all_properties[{\cf22 "columns"}] = {\cf22 "CSS3.0"};\par
148         m_all_properties[{\cf22 "content"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
149         m_all_properties[{\cf22 "counter-increment"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
150         m_all_properties[{\cf22 "counter-reset"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
151         m_all_properties[{\cf22 "crop"}] = {\cf22 "CSS3.0"};\par
152         m_all_properties[{\cf22 "cue"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
153         m_all_properties[{\cf22 "cue-after"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
154         m_all_properties[{\cf22 "cue-before"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
155         m_all_properties[{\cf22 "cursor"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
156         m_all_properties[{\cf22 "direction"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
157         m_all_properties[{\cf22 "display"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
158         m_all_properties[{\cf22 "dominant-baseline"}] = {\cf22 "CSS3.0"};\par
159         m_all_properties[{\cf22 "drop-initial-after-adjust"}] = {\cf22 "CSS3.0"};\par
160         m_all_properties[{\cf22 "drop-initial-after-align"}] = {\cf22 "CSS3.0"};\par
161         m_all_properties[{\cf22 "drop-initial-before-adjust"}] = {\cf22 "CSS3.0"};\par
162         m_all_properties[{\cf22 "drop-initial-before-align"}] = {\cf22 "CSS3.0"};\par
163         m_all_properties[{\cf22 "drop-initial-size"}] = {\cf22 "CSS3.0"};\par
164         m_all_properties[{\cf22 "drop-initial-value"}] = {\cf22 "CSS3.0"};\par
165         m_all_properties[{\cf22 "elevation"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
166         m_all_properties[{\cf22 "empty-cells"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
167         m_all_properties[{\cf22 "fit"}] = {\cf22 "CSS3.0"};\par
168         m_all_properties[{\cf22 "fit-position"}] = {\cf22 "CSS3.0"};\par
169         m_all_properties[{\cf22 "flex-align"}] = {\cf22 "CSS3.0"};\par
170         m_all_properties[{\cf22 "flex-flow"}] = {\cf22 "CSS3.0"};\par
171         m_all_properties[{\cf22 "flex-line-pack"}] = {\cf22 "CSS3.0"};\par
172         m_all_properties[{\cf22 "flex-order"}] = {\cf22 "CSS3.0"};\par
173         m_all_properties[{\cf22 "flex-pack"}] = {\cf22 "CSS3.0"};\par
174         m_all_properties[{\cf22 "float"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
175         m_all_properties[{\cf22 "float-offset"}] = {\cf22 "CSS3.0"};\par
176         m_all_properties[{\cf22 "font"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
177         m_all_properties[{\cf22 "font-family"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
178         m_all_properties[{\cf22 "font-format"}] = {\cf22 "CSS3.0"};\par
179         m_all_properties[{\cf22 "font-size"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
180         m_all_properties[{\cf22 "font-size-adjust"}] = {\cf22 "CSS2.0,CSS3.0"};\par
181         m_all_properties[{\cf22 "font-stretch"}] = {\cf22 "CSS2.0,CSS3.0"};\par
182         m_all_properties[{\cf22 "font-style"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
183         m_all_properties[{\cf22 "font-variant"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
184         m_all_properties[{\cf22 "font-weight"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
185         m_all_properties[{\cf22 "grid-columns"}] = {\cf22 "CSS3.0"};\par
186         m_all_properties[{\cf22 "grid-rows"}] = {\cf22 "CSS3.0"};\par
187         m_all_properties[{\cf22 "hanging-punctuation"}] = {\cf22 "CSS3.0"};\par
188         m_all_properties[{\cf22 "height"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
189         m_all_properties[{\cf22 "hyphenate-after"}] = {\cf22 "CSS3.0"};\par
190         m_all_properties[{\cf22 "hyphenate-before"}] = {\cf22 "CSS3.0"};\par
191         m_all_properties[{\cf22 "hyphenate-character"}] = {\cf22 "CSS3.0"};\par
192         m_all_properties[{\cf22 "hyphenate-lines"}] = {\cf22 "CSS3.0"};\par
193         m_all_properties[{\cf22 "hyphenate-resource"}] = {\cf22 "CSS3.0"};\par
194         m_all_properties[{\cf22 "hyphens"}] = {\cf22 "CSS3.0"};\par
195         m_all_properties[{\cf22 "icon"}] = {\cf22 "CSS3.0"};\par
196         m_all_properties[{\cf22 "image-orientation"}] = {\cf22 "CSS3.0"};\par
197         m_all_properties[{\cf22 "image-rendering"}] = {\cf22 "CSS3.0"};\par
198         m_all_properties[{\cf22 "image-resolution"}] = {\cf22 "CSS3.0"};\par
199         m_all_properties[{\cf22 "inline-box-align"}] = {\cf22 "CSS3.0"};\par
200         m_all_properties[{\cf22 "left"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
201         m_all_properties[{\cf22 "letter-spacing"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
202         m_all_properties[{\cf22 "line-break"}] = {\cf22 "CSS3.0"};\par
203         m_all_properties[{\cf22 "line-height"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
204         m_all_properties[{\cf22 "line-stacking"}] = {\cf22 "CSS3.0"};\par
205         m_all_properties[{\cf22 "line-stacking-ruby"}] = {\cf22 "CSS3.0"};\par
206         m_all_properties[{\cf22 "line-stacking-shift"}] = {\cf22 "CSS3.0"};\par
207         m_all_properties[{\cf22 "line-stacking-strategy"}] = {\cf22 "CSS3.0"};\par
208         m_all_properties[{\cf22 "list-style"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
209         m_all_properties[{\cf22 "list-style-image"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
210         m_all_properties[{\cf22 "list-style-position"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
211         m_all_properties[{\cf22 "list-style-type"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
212         m_all_properties[{\cf22 "margin"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
213         m_all_properties[{\cf22 "margin-bottom"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
214         m_all_properties[{\cf22 "margin-left"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
215         m_all_properties[{\cf22 "margin-right"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
216         m_all_properties[{\cf22 "margin-top"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
217         m_all_properties[{\cf22 "marker-offset"}] = {\cf22 "CSS2.0,CSS3.0"};\par
218         m_all_properties[{\cf22 "marks"}] = {\cf22 "CSS2.0,CSS3.0"};\par
219         m_all_properties[{\cf22 "marquee-direction"}] = {\cf22 "CSS3.0"};\par
220         m_all_properties[{\cf22 "marquee-loop"}] = {\cf22 "CSS3.0"};\par
221         m_all_properties[{\cf22 "marquee-play-count"}] = {\cf22 "CSS3.0"};\par
222         m_all_properties[{\cf22 "marquee-speed"}] = {\cf22 "CSS3.0"};\par
223         m_all_properties[{\cf22 "marquee-style"}] = {\cf22 "CSS3.0"};\par
224         m_all_properties[{\cf22 "max-height"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
225         m_all_properties[{\cf22 "max-width"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
226         m_all_properties[{\cf22 "min-height"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
227         m_all_properties[{\cf22 "min-width"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
228         m_all_properties[{\cf22 "move-to"}] = {\cf22 "CSS3.0"};\par
229         m_all_properties[{\cf22 "nav-down"}] = {\cf22 "CSS3.0"};\par
230         m_all_properties[{\cf22 "nav-index"}] = {\cf22 "CSS3.0"};\par
231         m_all_properties[{\cf22 "nav-left"}] = {\cf22 "CSS3.0"};\par
232         m_all_properties[{\cf22 "nav-right"}] = {\cf22 "CSS3.0"};\par
233         m_all_properties[{\cf22 "nav-up"}] = {\cf22 "CSS3.0"};\par
234         m_all_properties[{\cf22 "opacity"}] = {\cf22 "CSS3.0"};\par
235         m_all_properties[{\cf22 "orphans"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
236         m_all_properties[{\cf22 "outline"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
237         m_all_properties[{\cf22 "outline-color"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
238         m_all_properties[{\cf22 "outline-offset"}] = {\cf22 "CSS3.0"};\par
239         m_all_properties[{\cf22 "outline-style"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
240         m_all_properties[{\cf22 "outline-width"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
241         m_all_properties[{\cf22 "overflow"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
242         m_all_properties[{\cf22 "overflow-style"}] = {\cf22 "CSS3.0"};\par
243         m_all_properties[{\cf22 "overflow-wrap"}] = {\cf22 "CSS3.0"};\par
244         m_all_properties[{\cf22 "overflow-x"}] = {\cf22 "CSS3.0"};\par
245         m_all_properties[{\cf22 "overflow-y"}] = {\cf22 "CSS3.0"};\par
246         m_all_properties[{\cf22 "padding"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
247         m_all_properties[{\cf22 "padding-bottom"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
248         m_all_properties[{\cf22 "padding-left"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
249         m_all_properties[{\cf22 "padding-right"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
250         m_all_properties[{\cf22 "padding-top"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
251         m_all_properties[{\cf22 "page"}] = {\cf22 "CSS2.0,CSS3.0"};\par
252         m_all_properties[{\cf22 "page-break-after"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
253         m_all_properties[{\cf22 "page-break-before"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
254         m_all_properties[{\cf22 "page-break-inside"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
255         m_all_properties[{\cf22 "page-policy"}] = {\cf22 "CSS3.0"};\par
256         m_all_properties[{\cf22 "pause"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
257         m_all_properties[{\cf22 "pause-after"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
258         m_all_properties[{\cf22 "pause-before"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
259         m_all_properties[{\cf22 "perspective"}] = {\cf22 "CSS3.0"};\par
260         m_all_properties[{\cf22 "perspective-origin"}] = {\cf22 "CSS3.0"};\par
261         m_all_properties[{\cf22 "phonemes"}] = {\cf22 "CSS3.0"};\par
262         m_all_properties[{\cf22 "pitch"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
263         m_all_properties[{\cf22 "pitch-range"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
264         m_all_properties[{\cf22 "play-during"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
265         m_all_properties[{\cf22 "position"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
266         m_all_properties[{\cf22 "presentation-level"}] = {\cf22 "CSS3.0"};\par
267         m_all_properties[{\cf22 "punctuation-trim"}] = {\cf22 "CSS3.0"};\par
268         m_all_properties[{\cf22 "quotes"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
269         m_all_properties[{\cf22 "rendering-intent"}] = {\cf22 "CSS3.0"};\par
270         m_all_properties[{\cf22 "resize"}] = {\cf22 "CSS3.0"};\par
271         m_all_properties[{\cf22 "rest"}] = {\cf22 "CSS3.0"};\par
272         m_all_properties[{\cf22 "rest-after"}] = {\cf22 "CSS3.0"};\par
273         m_all_properties[{\cf22 "rest-before"}] = {\cf22 "CSS3.0"};\par
274         m_all_properties[{\cf22 "richness"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
275         m_all_properties[{\cf22 "right"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
276         m_all_properties[{\cf22 "rotation"}] = {\cf22 "CSS3.0"};\par
277         m_all_properties[{\cf22 "rotation-point"}] = {\cf22 "CSS3.0"};\par
278         m_all_properties[{\cf22 "ruby-align"}] = {\cf22 "CSS3.0"};\par
279         m_all_properties[{\cf22 "ruby-overhang"}] = {\cf22 "CSS3.0"};\par
280         m_all_properties[{\cf22 "ruby-position"}] = {\cf22 "CSS3.0"};\par
281         m_all_properties[{\cf22 "ruby-span"}] = {\cf22 "CSS3.0"};\par
282         m_all_properties[{\cf22 "size"}] = {\cf22 "CSS2.0,CSS3.0"};\par
283         m_all_properties[{\cf22 "speak"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
284         m_all_properties[{\cf22 "speak-header"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
285         m_all_properties[{\cf22 "speak-numeral"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
286         m_all_properties[{\cf22 "speak-punctuation"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
287         m_all_properties[{\cf22 "speech-rate"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
288         m_all_properties[{\cf22 "src"}] = {\cf22 "CSS3.0"};\par
289         m_all_properties[{\cf22 "stress"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
290         m_all_properties[{\cf22 "string-set"}] = {\cf22 "CSS3.0"};\par
291         m_all_properties[{\cf22 "tab-size"}] = {\cf22 "CSS3.0"};\par
292         m_all_properties[{\cf22 "table-layout"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
293         m_all_properties[{\cf22 "target"}] = {\cf22 "CSS3.0"};\par
294         m_all_properties[{\cf22 "target-name"}] = {\cf22 "CSS3.0"};\par
295         m_all_properties[{\cf22 "target-new"}] = {\cf22 "CSS3.0"};\par
296         m_all_properties[{\cf22 "target-position"}] = {\cf22 "CSS3.0"};\par
297         m_all_properties[{\cf22 "text-align"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
298         m_all_properties[{\cf22 "text-align-last"}] = {\cf22 "CSS3.0"};\par
299         m_all_properties[{\cf22 "text-decoration"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
300         m_all_properties[{\cf22 "text-decoration-color"}] = {\cf22 "CSS3.0"};\par
301         m_all_properties[{\cf22 "text-decoration-line"}] = {\cf22 "CSS3.0"};\par
302         m_all_properties[{\cf22 "text-decoration-skip"}] = {\cf22 "CSS3.0"};\par
303         m_all_properties[{\cf22 "text-decoration-style"}] = {\cf22 "CSS3.0"};\par
304         m_all_properties[{\cf22 "text-emphasis"}] = {\cf22 "CSS3.0"};\par
305         m_all_properties[{\cf22 "text-emphasis-color"}] = {\cf22 "CSS3.0"};\par
306         m_all_properties[{\cf22 "text-emphasis-position"}] = {\cf22 "CSS3.0"};\par
307         m_all_properties[{\cf22 "text-emphasis-style"}] = {\cf22 "CSS3.0"};\par
308         m_all_properties[{\cf22 "text-height"}] = {\cf22 "CSS3.0"};\par
309         m_all_properties[{\cf22 "text-indent"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
310         m_all_properties[{\cf22 "text-justify"}] = {\cf22 "CSS3.0"};\par
311         m_all_properties[{\cf22 "text-outline"}] = {\cf22 "CSS3.0"};\par
312         m_all_properties[{\cf22 "text-shadow"}] = {\cf22 "CSS2.0,CSS3.0"};\par
313         m_all_properties[{\cf22 "text-space-collapse"}] = {\cf22 "CSS3.0"};\par
314         m_all_properties[{\cf22 "text-transform"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
315         m_all_properties[{\cf22 "text-underline-position"}] = {\cf22 "CSS3.0"};\par
316         m_all_properties[{\cf22 "text-wrap"}] = {\cf22 "CSS3.0"};\par
317         m_all_properties[{\cf22 "top"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
318         m_all_properties[{\cf22 "transform"}] = {\cf22 "CSS3.0"};\par
319         m_all_properties[{\cf22 "transform-origin"}] = {\cf22 "CSS3.0"};\par
320         m_all_properties[{\cf22 "transform-style"}] = {\cf22 "CSS3.0"};\par
321         m_all_properties[{\cf22 "transition"}] = {\cf22 "CSS3.0"};\par
322         m_all_properties[{\cf22 "transition-delay"}] = {\cf22 "CSS3.0"};\par
323         m_all_properties[{\cf22 "transition-duration"}] = {\cf22 "CSS3.0"};\par
324         m_all_properties[{\cf22 "transition-property"}] = {\cf22 "CSS3.0"};\par
325         m_all_properties[{\cf22 "transition-timing-function"}] = {\cf22 "CSS3.0"};\par
326         m_all_properties[{\cf22 "unicode-bidi"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
327         m_all_properties[{\cf22 "vertical-align"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
328         m_all_properties[{\cf22 "visibility"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
329         m_all_properties[{\cf22 "voice-balance"}] = {\cf22 "CSS3.0"};\par
330         m_all_properties[{\cf22 "voice-duration"}] = {\cf22 "CSS3.0"};\par
331         m_all_properties[{\cf22 "voice-family"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
332         m_all_properties[{\cf22 "voice-pitch"}] = {\cf22 "CSS3.0"};\par
333         m_all_properties[{\cf22 "voice-pitch-range"}] = {\cf22 "CSS3.0"};\par
334         m_all_properties[{\cf22 "voice-rate"}] = {\cf22 "CSS3.0"};\par
335         m_all_properties[{\cf22 "voice-stress"}] = {\cf22 "CSS3.0"};\par
336         m_all_properties[{\cf22 "voice-volume"}] = {\cf22 "CSS3.0"};\par
337         m_all_properties[{\cf22 "volume"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
338         m_all_properties[{\cf22 "white-space"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
339         m_all_properties[{\cf22 "widows"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
340         m_all_properties[{\cf22 "width"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
341         m_all_properties[{\cf22 "word-break"}] = {\cf22 "CSS3.0"};\par
342         m_all_properties[{\cf22 "word-spacing"}] = {\cf22 "CSS1.0,CSS2.0,CSS2.1,CSS3.0"};\par
343         m_all_properties[{\cf22 "word-wrap"}] = {\cf22 "CSS3.0"};\par
344         m_all_properties[{\cf22 "z-index"}] = {\cf22 "CSS2.0,CSS2.1,CSS3.0"};\par
345         m_all_properties[{\cf22 "zoom"}] = {\cf22 "CSS3.0"};\par
346     \}\par
347 \}\par
}
{
\ql
References m_all_properties.}\par
{
\ql
Referenced by instance().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSProperties_a85d2f6febc365bc43eb897f592bbfbf5_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v contains\:CSSProperties}
{\xe \v CSSProperties\:contains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSProperties::contains (std::string  {\i pname})}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 47 \{\par
48     {\cf19 return} m_all_properties.count(pname) == 1;\par
49 \}\par
}
{
\ql
References m_all_properties.}\par
{
\ql
Referenced by levels(), CSSParser::parseInProperty(), CSSParser::parseInValue(), and CSSParser::property_is_next().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSProperties_a905dc3027e91931425d3eeb24008754f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v instance\:CSSProperties}
{\xe \v CSSProperties\:instance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b CSSProperties} * CSSProperties::instance (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 38 \{\par
39     {\cf19 if} (m_instance == 0) \{\par
40         m_instance = {\cf17 new} CSSProperties();\par
41     \}\par
42     {\cf19 return} m_instance;\par
43 \}\par
}
{
\ql
References CSSProperties(), and m_instance.}\par
{
\ql
Referenced by CSSParser::parseInProperty(), CSSParser::parseInValue(), and CSSParser::property_is_next().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSProperties_a8e6e2d825551edbb5947cc48015e3836_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSProperties_a8e6e2d825551edbb5947cc48015e3836_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v levels\:CSSProperties}
{\xe \v CSSProperties\:levels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSProperties::levels (std::string  {\i pname})}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 53 \{\par
54     {\cf19 if} (contains(pname)) \{\par
55         {\cf19 return} m_all_properties[pname];\par
56     \}\par
57     {\cf19 return} {\cf22 ""};\par
58 \}\par
}
{
\ql
References contains(), and m_all_properties.}\par
{
\ql
Referenced by CSSParser::parseInProperty(), and CSSParser::parseInValue().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSProperties_a28fd8f77b7163cf7ac94703cfca69aef_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSProperties_a28fd8f77b7163cf7ac94703cfca69aef_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_all_properties\:CSSProperties}
{\xe \v CSSProperties\:m_all_properties}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::map<std::string, std::string> CSSProperties::m_all_properties{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by contains(), CSSProperties(), and levels().}\par
}
{\xe \v m_instance\:CSSProperties}
{\xe \v CSSProperties\:m_instance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b CSSProperties} * CSSProperties::m_instance = 0{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\ql
Referenced by instance().}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CSSUtils Class Reference\par \pard\plain 
{\tc\tcl2 \v CSSUtils}
{\xe \v CSSUtils}
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
\par
{
{\f2 #include <CSSUtils.h>}}\par
Collaboration diagram for CSSUtils:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b build_value} (const std::vector< std::string > subvalues)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b char2str} (const char *c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b char2str} (const char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static char {\b chartolower} (const char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static char {\b chartoupper} (const char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b ctype_alpha} (char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b ctype_digit} (const char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b ctype_space} (const char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b ctype_xdigit} (char c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b escaped} (const std::string &istring, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::vector< std::string > {\b explode} (const std::string e, std::string s, const bool check)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b file_exists} (const char *filename)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b file_get_contents} (const std::string filename)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static double {\b hexdec} (std::string istring)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b implode} (const std::string e, const std::vector< std::string > s)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b in_char_arr} (const char *haystack, const char needle)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b in_str_array} (const std::string &haystack, const char needle)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const std::string {\b indent} (int lvl, const std::string &base)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const std::string {\b ltrim} (const std::string istring)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const std::string {\b rtrim} (const std::string istring)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const std::string {\b rtrim} (const std::string istring, const std::string chars)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static char {\b s_at} (const std::string &istring, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b str_replace} (const std::string find, const std::string replace, std::string str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b strtolower} (std::string istring)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b strtoupper} (std::string istring)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const std::string {\b trim} (const std::string istring)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v build_value\:CSSUtils}
{\xe \v CSSUtils\:build_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSUtils::build_value (const std::vector< std::string >  {\i subvalues}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 270 \{\par
271     std::string ret;\par
272     {\cf19 for}({\cf18 int} i = 0; i < subvalues.size(); i++)\par
273     \{\par
274         ret += subvalues[i];\par
275         {\cf19 if}(i != (subvalues.size()-1))\par
276         \{\par
277             {\cf18 char} last = s_at(subvalues[i], subvalues[i].length()-1);\par
278             {\cf18 char} next = s_at(subvalues[i+1], 0);\par
279             {\cf19 if} (strchr({\cf22 "(,=:"}, last) != NULL || strchr({\cf22 "),=:"}, next) != NULL)\par
280             \{\par
281                 {\cf19 continue};\par
282             \}\par
283             ret += {\cf22 " "};\par
284         \}\par
285     \}\par
286     {\cf19 return} ret;\par
287 \}\par
}
{
\ql
References s_at().}\par
{
\ql
Referenced by CSSParser::parseInValue().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a579a7bd712be8ebf0b2f8a6e89025366_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a579a7bd712be8ebf0b2f8a6e89025366_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v char2str\:CSSUtils}
{\xe \v CSSUtils\:char2str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSUtils::char2str (const char *  {\i c}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 168 \{\par
169     std::stringstream sstream;\par
170     sstream << c;\par
171     {\cf19 return} sstream.str();\par
172 \}\par
}
}
{\xe \v char2str\:CSSUtils}
{\xe \v CSSUtils\:char2str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSUtils::char2str (const char  {\i c}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 160 \{\par
161     std::string ret = {\cf22 ""};\par
162     ret += c;\par
163     {\cf19 return} ret;\par
164 \}\par
}
{
\ql
Referenced by CSSParser::parseInString().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a66e43aff6407e43a130b959912be4f66_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v chartolower\:CSSUtils}
{\xe \v CSSUtils\:chartolower}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char CSSUtils::chartolower (const char  {\i c}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 47 \{\par
48     {\cf19 switch}(c)\par
49     \{\par
50         {\cf19 case} {\cf23 'A'}: {\cf19 return} {\cf23 'a'};\par
51         {\cf19 case} {\cf23 'B'}: {\cf19 return} {\cf23 'b'};\par
52         {\cf19 case} {\cf23 'C'}: {\cf19 return} {\cf23 'c'};\par
53         {\cf19 case} {\cf23 'D'}: {\cf19 return} {\cf23 'd'};\par
54         {\cf19 case} {\cf23 'E'}: {\cf19 return} {\cf23 'e'};\par
55         {\cf19 case} {\cf23 'F'}: {\cf19 return} {\cf23 'f'};\par
56         {\cf19 case} {\cf23 'G'}: {\cf19 return} {\cf23 'g'};\par
57         {\cf19 case} {\cf23 'H'}: {\cf19 return} {\cf23 'h'};\par
58         {\cf19 case} {\cf23 'I'}: {\cf19 return} {\cf23 'i'};\par
59         {\cf19 case} {\cf23 'J'}: {\cf19 return} {\cf23 'j'};\par
60         {\cf19 case} {\cf23 'K'}: {\cf19 return} {\cf23 'k'};\par
61         {\cf19 case} {\cf23 'L'}: {\cf19 return} {\cf23 'l'};\par
62         {\cf19 case} {\cf23 'M'}: {\cf19 return} {\cf23 'm'};\par
63         {\cf19 case} {\cf23 'N'}: {\cf19 return} {\cf23 'n'};\par
64         {\cf19 case} {\cf23 'O'}: {\cf19 return} {\cf23 'o'};\par
65         {\cf19 case} {\cf23 'P'}: {\cf19 return} {\cf23 'p'};\par
66         {\cf19 case} {\cf23 'Q'}: {\cf19 return} {\cf23 'q'};\par
67         {\cf19 case} {\cf23 'R'}: {\cf19 return} {\cf23 'r'};\par
68         {\cf19 case} {\cf23 'S'}: {\cf19 return} {\cf23 's'};\par
69         {\cf19 case} {\cf23 'T'}: {\cf19 return} {\cf23 't'};\par
70         {\cf19 case} {\cf23 'U'}: {\cf19 return} {\cf23 'u'};\par
71         {\cf19 case} {\cf23 'V'}: {\cf19 return} {\cf23 'v'};\par
72         {\cf19 case} {\cf23 'W'}: {\cf19 return} {\cf23 'w'};\par
73         {\cf19 case} {\cf23 'X'}: {\cf19 return} {\cf23 'x'};\par
74         {\cf19 case} {\cf23 'Y'}: {\cf19 return} {\cf23 'y'};\par
75         {\cf19 case} {\cf23 'Z'}: {\cf19 return} {\cf23 'z'};\par
76         {\cf19 default}: {\cf19 return} c;\par
77     \}\par
78 \}\par
}
{
\ql
Referenced by ctype_alpha(), ctype_xdigit(), and strtolower().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_ad5919c2de0a7a7fe172efcf86ebc6eae_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v chartoupper\:CSSUtils}
{\xe \v CSSUtils\:chartoupper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char CSSUtils::chartoupper (const char  {\i c}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 93 \{\par
94     {\cf19 switch}(c)\par
95     \{\par
96         {\cf19 case} {\cf23 'a'}: {\cf19 return} {\cf23 'A'};\par
97         {\cf19 case} {\cf23 'b'}: {\cf19 return} {\cf23 'B'};\par
98         {\cf19 case} {\cf23 'c'}: {\cf19 return} {\cf23 'C'};\par
99         {\cf19 case} {\cf23 'd'}: {\cf19 return} {\cf23 'D'};\par
100         {\cf19 case} {\cf23 'e'}: {\cf19 return} {\cf23 'E'};\par
101         {\cf19 case} {\cf23 'f'}: {\cf19 return} {\cf23 'F'};\par
102         {\cf19 case} {\cf23 'g'}: {\cf19 return} {\cf23 'G'};\par
103         {\cf19 case} {\cf23 'h'}: {\cf19 return} {\cf23 'H'};\par
104         {\cf19 case} {\cf23 'i'}: {\cf19 return} {\cf23 'I'};\par
105         {\cf19 case} {\cf23 'j'}: {\cf19 return} {\cf23 'J'};\par
106         {\cf19 case} {\cf23 'k'}: {\cf19 return} {\cf23 'K'};\par
107         {\cf19 case} {\cf23 'l'}: {\cf19 return} {\cf23 'L'};\par
108         {\cf19 case} {\cf23 'm'}: {\cf19 return} {\cf23 'M'};\par
109         {\cf19 case} {\cf23 'n'}: {\cf19 return} {\cf23 'N'};\par
110         {\cf19 case} {\cf23 'o'}: {\cf19 return} {\cf23 'O'};\par
111         {\cf19 case} {\cf23 'p'}: {\cf19 return} {\cf23 'P'};\par
112         {\cf19 case} {\cf23 'q'}: {\cf19 return} {\cf23 'Q'};\par
113         {\cf19 case} {\cf23 'r'}: {\cf19 return} {\cf23 'R'};\par
114         {\cf19 case} {\cf23 's'}: {\cf19 return} {\cf23 'S'};\par
115         {\cf19 case} {\cf23 't'}: {\cf19 return} {\cf23 'T'};\par
116         {\cf19 case} {\cf23 'u'}: {\cf19 return} {\cf23 'U'};\par
117         {\cf19 case} {\cf23 'v'}: {\cf19 return} {\cf23 'V'};\par
118         {\cf19 case} {\cf23 'w'}: {\cf19 return} {\cf23 'W'};\par
119         {\cf19 case} {\cf23 'x'}: {\cf19 return} {\cf23 'X'};\par
120         {\cf19 case} {\cf23 'y'}: {\cf19 return} {\cf23 'Y'};\par
121         {\cf19 case} {\cf23 'z'}: {\cf19 return} {\cf23 'Z'};\par
122         {\cf19 default}: {\cf19 return} c;\par
123     \}\par
124 \}\par
}
{
\ql
Referenced by strtoupper().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a29f00cefd8bc3475be8f613727c7767c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ctype_alpha\:CSSUtils}
{\xe \v CSSUtils\:ctype_alpha}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSUtils::ctype_alpha (char  {\i c}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 345 \{\par
346     c = chartolower(c);\par
347     {\cf19 return} (c == {\cf23 'a'} || c == {\cf23 'b'} || c == {\cf23 'c'} || c == {\cf23 'd'} || c == {\cf23 'e'} || c == {\cf23 'f'} || \par
348             c == {\cf23 'g'} || c == {\cf23 'h'} || c == {\cf23 'i'} || c == {\cf23 'j'} || c == {\cf23 'k'} || c == {\cf23 'l'} ||\par
349             c == {\cf23 'm'} || c == {\cf23 'n'} || c == {\cf23 'o'} || c == {\cf23 'p'} || c == {\cf23 'q'} || c == {\cf23 'r'} ||\par
350             c == {\cf23 's'} || c == {\cf23 't'} || c == {\cf23 'u'} || c == {\cf23 'v'} || c == {\cf23 'w'} || c == {\cf23 'x'} || \par
351             c == {\cf23 'y'} || c == {\cf23 'z'});\par
352 \}\par
}
{
\ql
References chartolower().}\par
{
\ql
Referenced by CSSParser::parseInSelector().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a67b7bac07006f57e18b2c042bb383b24_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a67b7bac07006f57e18b2c042bb383b24_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ctype_digit\:CSSUtils}
{\xe \v CSSUtils\:ctype_digit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSUtils::ctype_digit (const char  {\i c}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 333 \{\par
334     {\cf19 return} (c == {\cf23 '0'} || c == {\cf23 '1'} || c == {\cf23 '2'} || c == {\cf23 '3'} || c == {\cf23 '4'} || c == {\cf23 '5'} || c == {\cf23 '6'} || c == {\cf23 '7'} || c == {\cf23 '8'} || c == {\cf23 '9'});\par
335 \}\par
}
{
\ql
Referenced by ctype_xdigit().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a1f004dff4b1ce6828402cfd0936bd8b2_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ctype_space\:CSSUtils}
{\xe \v CSSUtils\:ctype_space}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSUtils::ctype_space (const char  {\i c}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 327 \{\par
328     {\cf19 return} (c == {\cf23 ' '} || c == {\cf23 '\\t'} || c == {\cf23 '\\r'} || c == {\cf23 '\\n'} || c == 11);\par
329 \}\par
}
{
\ql
Referenced by CSSParser::parseInAtBlock(), CSSParser::parseInProperty(), CSSParser::parseInSelector(), CSSParser::parseInValue(), and CSSParser::unicode().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a99df2b7feffa035de4d3ebbd79d6b61d_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ctype_xdigit\:CSSUtils}
{\xe \v CSSUtils\:ctype_xdigit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSUtils::ctype_xdigit (char  {\i c}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 339 \{\par
340     c = chartolower(c);\par
341     {\cf19 return} (ctype_digit(c) || c == {\cf23 'a'} || c == {\cf23 'b'} || c == {\cf23 'c'} || c == {\cf23 'd'} || c == {\cf23 'e'} || c == {\cf23 'f'});\par
342 \}\par
}
{
\ql
References chartolower(), and ctype_digit().}\par
{
\ql
Referenced by CSSParser::unicode().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_aa20db64977769b804a47139652ac3d56_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_aa20db64977769b804a47139652ac3d56_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v escaped\:CSSUtils}
{\xe \v CSSUtils\:escaped}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSUtils::escaped (const std::string &  {\i istring}, int  {\i pos}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 214 \{\par
215     {\cf19 return} !(s_at(istring,pos-1) != {\cf23 '\\\\'} || escaped(istring,pos-1));\par
216 \}\par
}
{
\ql
References s_at().}\par
{
\ql
Referenced by CSSParser::is_token(), and CSSParser::parseInString().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_aa1941ab849b3f26c29c24d9fe116084a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_aa1941ab849b3f26c29c24d9fe116084a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v explode\:CSSUtils}
{\xe \v CSSUtils\:explode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > CSSUtils::explode (const std::string  {\i e}, std::string  {\i s}, const bool  {\i check}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 234 \{\par
235     std::vector<std::string> ret;\par
236     {\cf18 int} iPos = s.find(e, 0);\par
237     {\cf18 int} iPit = e.length();\par
238         \par
239     {\cf19 while}(iPos > -1)\par
240     \{\par
241         {\cf19 if}(iPos != 0 || check)\par
242         \{\par
243             ret.push_back(s.substr(0,iPos));\par
244         \}\par
245         s.erase(0,iPos+iPit);\par
246         iPos = s.find(e, 0);\par
247     \}\par
248         \par
249     {\cf19 if}(s != {\cf22 ""} || check)\par
250     \{\par
251         ret.push_back(s);\par
252     \}\par
253     {\cf19 return} ret;\par
254 \}\par
}
}
{\xe \v file_exists\:CSSUtils}
{\xe \v CSSUtils\:file_exists}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSUtils::file_exists (const char *  {\i filename}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 199 \{\par
200     std::ifstream file_input(filename);\par
201 \par
202     {\cf19 if}(file_input.is_open())\par
203     \{\par
204         file_input.close();\par
205         {\cf19 return} {\cf17 true};\par
206     \}\par
207     \par
208     file_input.close();\par
209     {\cf19 return} {\cf17 false};\par
210 \}\par
}
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_adf42b632b3dafd79d8f6013b3e73255c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v file_get_contents\:CSSUtils}
{\xe \v CSSUtils\:file_get_contents}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSUtils::file_get_contents (const std::string  {\i filename}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 176 \{\par
177     std::ifstream file_input(filename.c_str(),std::ios::binary);\par
178     std::string line, file_contents = {\cf22 ""};\par
179     \par
180     {\cf19 if}(file_input.bad())\par
181     \{\par
182         {\cf19 return} {\cf22 ""};\par
183     \}\par
184     {\cf19 else}\par
185     \{\par
186         {\cf19 while}(file_input.good())\par
187         \{\par
188             getline(file_input,line);\par
189             file_contents += (line + {\cf22 "\\n"});\par
190         \}       \par
191     \}\par
192     file_input.close();\par
193 \par
194     {\cf19 return} file_contents;\par
195 \}\par
}
{
\ql
Referenced by main().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a8d6c64ec499fc7daaedb11efb1b20187_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v hexdec\:CSSUtils}
{\xe \v CSSUtils\:hexdec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double CSSUtils::hexdec (std::string  {\i istring}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 128 \{\par
129     {\cf18 double} ret = 0;\par
130     istring = trim(istring);\par
131     {\cf19 for}({\cf18 int} i = istring.length()-1; i >= 0; --i)\par
132     \{\par
133         {\cf18 int} num = 0;\par
134         {\cf19 switch}(tolower(istring[i]))\par
135         \{\par
136             {\cf19 case} {\cf23 'a'}: num = 10; {\cf19 break};\par
137             {\cf19 case} {\cf23 'b'}: num = 11; {\cf19 break};\par
138             {\cf19 case} {\cf23 'c'}: num = 12; {\cf19 break};\par
139             {\cf19 case} {\cf23 'd'}: num = 13; {\cf19 break};\par
140             {\cf19 case} {\cf23 'e'}: num = 14; {\cf19 break};\par
141             {\cf19 case} {\cf23 'f'}: num = 15; {\cf19 break};\par
142             {\cf19 case} {\cf23 '1'}: num = 1; {\cf19 break};\par
143             {\cf19 case} {\cf23 '2'}: num = 2; {\cf19 break};\par
144             {\cf19 case} {\cf23 '3'}: num = 3; {\cf19 break};\par
145             {\cf19 case} {\cf23 '4'}: num = 4; {\cf19 break};\par
146             {\cf19 case} {\cf23 '5'}: num = 5; {\cf19 break};\par
147             {\cf19 case} {\cf23 '6'}: num = 6; {\cf19 break};\par
148             {\cf19 case} {\cf23 '7'}: num = 7; {\cf19 break};\par
149             {\cf19 case} {\cf23 '8'}: num = 8; {\cf19 break};\par
150             {\cf19 case} {\cf23 '9'}: num = 9; {\cf19 break};\par
151             {\cf19 case} {\cf23 '0'}: num = 0; {\cf19 break};\par
152         \}\par
153         ret += num*pow(({\cf18 double}) 16, ({\cf18 double}) istring.length()-i-1);\par
154     \}\par
155     {\cf19 return} ret;\par
156 \}\par
}
{
\ql
References trim().}\par
{
\ql
Referenced by CSSParser::unicode().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a9ba1a89ef38bd6008d1e463fb65c752c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a9ba1a89ef38bd6008d1e463fb65c752c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v implode\:CSSUtils}
{\xe \v CSSUtils\:implode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSUtils::implode (const std::string  {\i e}, const std::vector< std::string >  {\i s}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 258 \{\par
259     std::string ret;\par
260     {\cf19 for}({\cf18 int} i = 0; i < s.size(); i++)\par
261     \{\par
262         ret += s[i];\par
263         {\cf19 if}(i != (s.size()-1)) ret += e;\par
264     \}\par
265     {\cf19 return} ret;\par
266 \}\par
}
{
\ql
Referenced by CSSParser::parseInValue().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a0daea43d1a253dc7cc7126325252fcfe_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v in_char_arr\:CSSUtils}
{\xe \v CSSUtils\:in_char_arr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSUtils::in_char_arr (const char *  {\i haystack}, const char  {\i needle}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 307 \{\par
308     {\cf19 for}({\cf18 int} i = 0; i < strlen(haystack); ++i)\par
309     \{\par
310         {\cf19 if}(haystack[i] == needle)\par
311         \{\par
312             {\cf19 return} {\cf17 true};\par
313         \}\par
314     \}\par
315     {\cf19 return} {\cf17 false};\par
316 \}\par
}
{
\ql
Referenced by CSSParser::parseInAtBlock().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a0d44f360a195dd93689726f7f65bba82_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v in_str_array\:CSSUtils}
{\xe \v CSSUtils\:in_str_array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool CSSUtils::in_str_array (const std::string &  {\i haystack}, const char  {\i needle}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 320 \{\par
321     std::cout << {\cf22 " Needle: "} << needle << std::endl;\par
322     {\cf19 return} (haystack.find_first_of(needle,0) != std::string::npos);\par
323 \}\par
}
{
\ql
Referenced by CSSParser::is_token().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_aab27c637bbbbc3ee17c88eaaac93533e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v indent\:CSSUtils}
{\xe \v CSSUtils\:indent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string CSSUtils::indent (int  {\i lvl}, const std::string &  {\i base}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 396 \{\par
397     std::string ind = {\cf22 ""};\par
398     {\cf19 for} ({\cf18 int} i = 0; i < lvl; i++) \{\par
399         ind = ind + base;\par
400     \}\par
401     {\cf19 return} ind;\par
402 \}\par
}
{
\ql
Referenced by CSSParser::serialize_css().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a68920805832d2c80542fe036bb93ccd2_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ltrim\:CSSUtils}
{\xe \v CSSUtils\:ltrim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string CSSUtils::ltrim (const std::string  {\i istring}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 370 \{\par
371     std::string::size_type first = istring.find_first_not_of({\cf22 " \\n\\t\\r\\0xb"});\par
372     {\cf19 if} (first == std::string::npos) \{\par
373         {\cf19 return} std::string();\par
374     \}\par
375     {\cf19 else} \par
376     \{\par
377         {\cf19 return} istring.substr( first );\par
378     \}\par
379 \}\par
}
}
{\xe \v rtrim\:CSSUtils}
{\xe \v CSSUtils\:rtrim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string CSSUtils::rtrim (const std::string  {\i istring}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
must succeed\par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 383 \{\par
384     std::string::size_type last = istring.find_last_not_of({\cf22 " \\n\\t\\r\\0xb"}); \par
385     {\cf19 return} istring.substr( 0, last + 1);\par
386 \}\par
}
{
\ql
Referenced by CSSParser::unicode().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a5ad29bcb25d3721b08a70a94886d3baf_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v rtrim\:CSSUtils}
{\xe \v CSSUtils\:rtrim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string CSSUtils::rtrim (const std::string  {\i istring}, const std::string  {\i chars}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
must succeed\par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 390 \{\par
391     std::string::size_type last = istring.find_last_not_of(chars); \par
392     {\cf19 return} istring.substr( 0, last + 1);\par
393 \}\par
}
}
{\xe \v s_at\:CSSUtils}
{\xe \v CSSUtils\:s_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char CSSUtils::s_at (const std::string &  {\i istring}, int  {\i pos}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 221 \{\par
222     {\cf19 if}(pos > (istring.length()-1) || pos < 0)\par
223     \{\par
224         {\cf19 return} 0;\par
225     \} \par
226     {\cf19 else} \par
227     \{\par
228         {\cf19 return} istring[pos];\par
229     \}\par
230 \}\par
}
{
\ql
Referenced by build_value(), escaped(), CSSParser::parseInAtBlock(), CSSParser::parseInComment(), CSSParser::parseInProperty(), CSSParser::parseInSelector(), and CSSParser::parseInValue().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_afe0d23972cebed07a91dcf2c7baf3173_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v str_replace\:CSSUtils}
{\xe \v CSSUtils\:str_replace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSUtils::str_replace (const std::string  {\i find}, const std::string  {\i replace}, std::string  {\i str}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 291 \{\par
292     {\cf18 int} len = find.length();\par
293     {\cf18 int} replace_len = replace.length();\par
294     {\cf18 int} pos = str.find(find);\par
295 \par
296     {\cf19 while}(pos != std::string::npos)\par
297     \{  \par
298         str.replace(pos, len, replace);\par
299         pos = str.find(find, pos + replace_len);\par
300     \}\par
301     {\cf19 return} str;\par
302 \}\par
}
{
\ql
Referenced by CSSParser::parse_css().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_acde23a75c38d3a931cd71a51c832b0cf_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v strtolower\:CSSUtils}
{\xe \v CSSUtils\:strtolower}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSUtils::strtolower (std::string  {\i istring}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 36 \{\par
37     {\cf18 int} str_size = istring.length();\par
38     {\cf19 for}({\cf18 int} i = 0; i < str_size; i++)\par
39     \{\par
40         istring[i] = chartolower(istring[i]);\par
41     \}\par
42     {\cf19 return} istring;\par
43 \}\par
}
{
\ql
References chartolower().}\par
{
\ql
Referenced by CSSParser::parseInSelector(), CSSParser::parseInValue(), and CSSParser::property_is_next().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_ae29a6bee3adc1bdeda51228a45ed48a8_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_ae29a6bee3adc1bdeda51228a45ed48a8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v strtoupper\:CSSUtils}
{\xe \v CSSUtils\:strtoupper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string CSSUtils::strtoupper (std::string  {\i istring}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 82 \{\par
83     {\cf18 int} str_size = istring.length();\par
84     {\cf19 for}({\cf18 int} i = 0; i < str_size; i++)\par
85     \{\par
86         istring[i] = chartoupper(istring[i]);\par
87     \}\par
88     {\cf19 return} istring;\par
89 \}\par
}
{
\ql
References chartoupper().}\par
{
\ql
Referenced by CSSParser::parseInValue().}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a15ad93bdc92705c92fc9c6c998d3f36a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a15ad93bdc92705c92fc9c6c998d3f36a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v trim\:CSSUtils}
{\xe \v CSSUtils\:trim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string CSSUtils::trim (const std::string  {\i istring}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 356 \{\par
357     std::string::size_type first = istring.find_first_not_of({\cf22 " \\n\\t\\r\\0xb"});\par
358     {\cf19 if} (first == std::string::npos) \{\par
359         {\cf19 return} std::string();\par
360     \}\par
361     {\cf19 else}\par
362     \{\par
363         std::string::size_type last = istring.find_last_not_of({\cf22 " \\n\\t\\r\\0xb"});\par
364         {\cf19 return} istring.substr( first, last - first + 1);\par
365     \}\par
366 \}\par
}
{
\ql
Referenced by CSSParser::add_token(), hexdec(), main(), CSSParser::parseInAtBlock(), CSSParser::parseInSelector(), CSSParser::parseInValue(), CSSParser::property_is_next(), CSSParser::serialize_css(), and CSSParser::unicode().}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classCSSUtils_a94fe7f3212d281f585d2b16937f87674_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cssparser/CSSParser.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v cssparser/CSSParser.cpp}
{\xe \v cssparser/CSSParser.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "CSSProperties.h"}\par
{\f2 #include "CSSParser.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CSSParser.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSParser_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constants\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b ParseStatus} []\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v ParseStatus\:CSSParser.cpp}
{\xe \v CSSParser.cpp\:ParseStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* ParseStatus[]}}
\par
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
\{\par
  {\cf22 "PIS"}, {\cf22 "PIP"}, {\cf22 "PIV"}, {\cf22 "PIS"}, {\cf22 "PIC"}, {\cf22 "PIA"}\par
\}\par
}
{
\ql
Referenced by CSSParser::parse_css().}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cssparser/CSSParser.h File Reference\par \pard\plain 
{\tc\tcl2 \v cssparser/CSSParser.h}
{\xe \v cssparser/CSSParser.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstdlib>}\par
{\f2 #include <utility>}\par
{\f2 #include <string>}\par
{\f2 #include <iterator>}\par
{\f2 #include <vector>}\par
{\f2 #include <assert.h>}\par
{\f2 #include <math.h>}\par
{\f2 #include <time.h>}\par
{\f2 #include <sstream>}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <map>}\par
{\f2 #include <algorithm>}\par
{\f2 #include "CSSProperties.h"}\par
{\f2 #include "CSSUtils.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CSSParser.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSParser_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSParser_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CSSParser::message}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Class Documentation\par
\pard\plain 
{\xe \v CSSParser::message}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
struct CSSParser::message\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
Collaboration diagram for CSSParser::message:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structCSSParser_1_1message__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Class Members:\par}
\pard\plain \s80\li0\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\qr string{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\cell }{m\cell }{\cell }{\row }
{\qr {\b message_type}{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\cell }{t\cell }{\cell }{\row }
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cssparser/CSSProperties.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v cssparser/CSSProperties.cpp}
{\xe \v cssparser/CSSProperties.cpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include "CSSProperties.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CSSProperties.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSProperties_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cssparser/CSSProperties.h File Reference\par \pard\plain 
{\tc\tcl2 \v cssparser/CSSProperties.h}
{\xe \v cssparser/CSSProperties.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstdlib>}\par
{\f2 #include <string>}\par
{\f2 #include <map>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CSSProperties.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSProperties_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSProperties_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b CSSProperties}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CSS_PROPERTIES_H}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v CSS_PROPERTIES_H\:CSSProperties.h}
{\xe \v CSSProperties.h\:CSS_PROPERTIES_H}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CSS_PROPERTIES_H}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cssparser/CSSUtils.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v cssparser/CSSUtils.cpp}
{\xe \v cssparser/CSSUtils.cpp}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstring>}\par
{\f2 #include "CSSUtils.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CSSUtils.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSUtils_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cssparser/CSSUtils.h File Reference\par \pard\plain 
{\tc\tcl2 \v cssparser/CSSUtils.h}
{\xe \v cssparser/CSSUtils.h}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstdlib>}\par
{\f2 #include <string>}\par
{\f2 #include <iterator>}\par
{\f2 #include <vector>}\par
{\f2 #include <assert.h>}\par
{\f2 #include <math.h>}\par
{\f2 #include <sstream>}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <algorithm>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for CSSUtils.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSUtils_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "CSSUtils_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b CSSUtils}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cssparser/main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v cssparser/main.cpp}
{\xe \v cssparser/main.cpp}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cstdlib>}\par
{\f2 #include <string>}\par
{\f2 #include <iterator>}\par
{\f2 #include <utility>}\par
{\f2 #include <vector>}\par
{\f2 #include <assert.h>}\par
{\f2 #include <math.h>}\par
{\f2 #include <time.h>}\par
{\f2 #include <sstream>}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <map>}\par
{\f2 #include <algorithm>}\par
{\f2 #include "CSSProperties.h"}\par
{\f2 #include "CSSUtils.h"}\par
{\f2 #include "CSSParser.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for main.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "main_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main function. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main function. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 52 \{\par
53     CSSParser csst;\par
54 \par
55     {\cf19 if}(argc > 1)\par
56     \{\par
57         std::string filein = argv[1];\par
58         {\cf19 if}(filein != {\cf22 "-"} && !CSSUtils::file_exists(argv[1]))\par
59         \{\par
60             std::cout << {\cf22 "The file \\""} << filein << {\cf22 "\\" does not exist."} << std::endl;\par
61             {\cf19 return} EXIT_FAILURE;\par
62         \}\par
63         \par
64         std::string output_filename;\par
65         \par
66         {\cf19 for}({\cf18 int} i = 2; i < argc; ++i)\par
67         \{\par
68             {\cf18 bool} output_file = {\cf17 true};\par
69             {\cf19 if}(output_file)\par
70             \{\par
71                 output_filename = CSSUtils::trim(argv[i]);\par
72             \}\par
73         \}\par
74         \par
75         std::string css_file;\par
76         {\cf19 if}(filein == {\cf22 "-"})\par
77         \{\par
78             std::string temp;\par
79             {\cf19 do} \{\par
80                 getline(std::cin, temp, {\cf23 '\\n'});\par
81                 css_file += (temp + {\cf22 "\\n"});\par
82             \} {\cf19 while}(std::cin);\par
83         \}\par
84         {\cf19 else}\par
85         \{\par
86             css_file = CSSUtils::file_get_contents(argv[1]);\par
87         \}\par
88 \par
89         {\cf20 // The interface}\par
90 \par
91 \par
92         {\cf20 // valid css levels are "CSS1.0", "CSS2.0", "CSS2.1", "CSS3.0" }\par
93         csst.set_level({\cf22 "CSS3.0"});\par
94 \par
95         {\cf20 // do the actual parsing}\par
96         csst.parse_css(css_file);\par
97 \par
98         {\cf20 // check for any parse errors}\par
99         std::vector<std::string> errors = csst.get_parse_errors();\par
100         std::cout << {\cf22 "Errors: "} << errors.size() << std::endl;\par
101         {\cf19 for}({\cf18 int} i = 0; i < errors.size(); i++) \{\par
102             std::cout << {\cf22 "  Error: "} << errors[i] << std::endl;\par
103         \}\par
104 \par
105         {\cf20 // check for any parse warnings}\par
106         std::vector<std::string> warnings = csst.get_parse_warnings();\par
107         std::cout << {\cf22 "Warnings: "} << warnings.size() << std::endl;\par
108         {\cf19 for}({\cf18 int} i = 0; i < warnings.size(); i++) \{\par
109             std::cout << {\cf22 "  Warning: "} << warnings[i] << std::endl;\par
110         \}\par
111 \par
112         {\cf20 // check for any parse information messages}\par
113         std::vector<std::string> infos = csst.get_parse_info();\par
114         std::cout << {\cf22 "Information: "} << infos.size() << std::endl;\par
115         {\cf19 for}({\cf18 int} i = 0; i < infos.size(); i++) \{\par
116             std::cout << {\cf22 "  Information: "} << infos[i] << std::endl;\par
117         \}\par
118 \par
119         {\cf20 // get any @charset without having to walk the csstokens list}\par
120         std::string cset = csst.get_charset();\par
121         {\cf19 if} (!cset.empty()) std::cout << {\cf22 "charset: "} << cset << std::endl;\par
122 \par
123         {\cf20 // get all @import without having to walk the csstokens list}\par
124         std::vector<std::string> imports = csst.get_import();\par
125         {\cf19 for}({\cf18 int} i = 0; i < imports.size(); i++) \{\par
126             std::cout << {\cf22 "import: "} << imports[i] << std::endl;\par
127         \}\par
128 \par
129         {\cf20 // get any @namespace without having to walk the csstokens list}\par
130         std::string ns = csst.get_namespace();\par
131         {\cf19 if} (!ns.empty()) std::cout << {\cf22 "namespace: "} << ns << std::endl;\par
132         \par
133         {\cf20 // The possible token type are an enum:}\par
134         {\cf20 // enum token_type:}\par
135         {\cf20 //}\par
136         {\cf20 //     CHARSET   =  0}\par
137         {\cf20 //     IMPORT    =  1}\par
138         {\cf20 //     NAMESP    =  2}\par
139         {\cf20 //     AT_START  =  3}\par
140         {\cf20 //     AT_END    =  4}\par
141         {\cf20 //     SEL_START =  5}\par
142         {\cf20 //     SEL_END   =  6}\par
143         {\cf20 //     PROPERTY  =  7}\par
144         {\cf20 //     VALUE     =  8}\par
145         {\cf20 //     COMMENT   =  9}\par
146         {\cf20 //     CSS_END   = 10}\par
147 \par
148         {\cf20 // now walk the sequence of parsed tokens}\par
149         {\cf20 // if you know the location of the token you want in the sequence (starting with 0)}\par
150         {\cf20 // simply pass start_ptr in get_next_token set to a valid starting point in the token sequence}\par
151 \par
152         CSSParser::token atoken = csst.get_next_token();\par
153         {\cf19 while}(atoken.type != CSSParser::CSS_END) \{\par
154             std::string ttype = csst.get_type_name(atoken.type);\par
155             std::cout << {\cf22 "Pos: "} << atoken.pos << {\cf22 " Line: "} << atoken.line << {\cf22 " Type: "} << ttype\par
156                       <<{\cf22 "  Data: "} << atoken.data << std::endl;\par
157             atoken = csst.get_next_token();\par
158         \}\par
159 \par
160 {\cf21 #if 0}\par
161         {\cf20 // serialize CSS to stdout if no output file is specified}\par
162         std::string cssout;\par
163         {\cf19 if}(output_filename == {\cf22 ""})\par
164         \{\par
165             cssout = csst.serialize_css();\par
166         \}\par
167         {\cf19 else}\par
168         \{\par
169             cssout = csst.serialize_css(output_filename, {\cf17 false});\par
170         \}\par
171 \par
172 {\cf21 #endif}\par
173         {\cf19 return} EXIT_SUCCESS;\par
174     \}\par
175 \par
176     {\cf19 return} EXIT_SUCCESS;\par
177 \}\par
}
{
\ql
References CSSParser::CSS_END, CSSParser::token::data, CSSUtils::file_exists(), CSSUtils::file_get_contents(), CSSParser::get_charset(), CSSParser::get_import(), CSSParser::get_namespace(), CSSParser::get_next_token(), CSSParser::get_parse_errors(), CSSParser::get_parse_info(), CSSParser::get_parse_warnings(), CSSParser::get_type_name(), CSSParser::token::line, CSSParser::parse_css(), CSSParser::token::pos, CSSParser::serialize_css(), CSSParser::set_level(), CSSUtils::trim(), and CSSParser::token::type.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "main_8cpp_a0ddf1224851353fc92bfbff6f499fa97_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}